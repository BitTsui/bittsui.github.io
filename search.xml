<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode-221-最大正方形</title>
    <url>/p/6b3c/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/maximal-square/submissions/535259143/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/maximal-square/submissions/535259143/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m,n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        lst = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            lst[i][<span class="number">0</span>] = <span class="built_in">int</span>(matrix[i][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            lst[<span class="number">0</span>][i] = <span class="built_in">int</span>(matrix[<span class="number">0</span>][i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                a,b,c = lst[i-<span class="number">1</span>][j],lst[i][j-<span class="number">1</span>],lst[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(matrix[i][j]) == <span class="number">0</span>:</span><br><span class="line">                    lst[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">min</span>(a,b,c) == <span class="number">0</span>:</span><br><span class="line">                    lst[i][j] = <span class="built_in">int</span>(matrix[i][j])</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">min</span>(a,b,c) &lt; <span class="built_in">max</span>(a,b,c):</span><br><span class="line">                    lst[i][j] = <span class="built_in">min</span>(a,b,c)+<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst[i][j] = a+<span class="number">1</span></span><br><span class="line">        <span class="comment"># print(lst)</span></span><br><span class="line"></span><br><span class="line">        bian = <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">max</span>,lst))</span><br><span class="line">        <span class="keyword">return</span> bian*bian</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python中二维数组求最大值</title>
    <url>/p/7474/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">0</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接max，返回的是这个二维数组的某一行（这一行的和最大）</span></span><br><span class="line"><span class="comment"># 输出[3, 4]</span></span><br><span class="line"><span class="built_in">max</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的是4，即[3, 4]中的最大值4</span></span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">max</span>(lst))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的是每一行中元素的最大值的map类型对象。</span></span><br><span class="line"><span class="comment">#  比如lst有3行，输出的结果就有三个元素</span></span><br><span class="line">mp = <span class="built_in">map</span>(<span class="built_in">max</span>,lst)</span><br><span class="line"><span class="comment"># 可以foreach迭代mp对象的元素</span></span><br><span class="line"><span class="comment"># 也可以转list类型后直接输出为[2, 5, 4]</span></span><br><span class="line"><span class="built_in">list</span>(mp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的是二维数组lst中所有元素的最大值</span></span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">max</span>,lst))</span><br></pre></td></tr></table></figure>



<p>总结一下，要得到二维数组的最大值，不能用 max(max(lst))，而是用max(map(max,lst))</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode-931-下降路径最小和</title>
    <url>/p/6942/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/minimum-falling-path-sum/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/minimum-falling-path-sum/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minFallingPathSum</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m,n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        lst = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            lst[m-<span class="number">1</span>][i] = matrix[m-<span class="number">1</span>][i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                    lst[i][j] = matrix[i][j] + <span class="built_in">min</span>(lst[i+<span class="number">1</span>][j],lst[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">elif</span> j==n-<span class="number">1</span>:</span><br><span class="line">                    lst[i][j] = matrix[i][j] + <span class="built_in">min</span>(lst[i+<span class="number">1</span>][j],lst[i+<span class="number">1</span>][j-<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst[i][j] = matrix[i][j] + <span class="built_in">min</span>(lst[i+<span class="number">1</span>][j-<span class="number">1</span>],lst[i+<span class="number">1</span>][j],lst[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(lst)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(lst[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode-63-不同路径Ⅱ</title>
    <url>/p/618/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/unique-paths-ii/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePathsWithObstacles</span>(<span class="params">self, obstacleGrid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m,n = <span class="built_in">len</span>(obstacleGrid), <span class="built_in">len</span>(obstacleGrid[<span class="number">0</span>])</span><br><span class="line">        lst = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        lst[m-<span class="number">1</span>][n-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> obstacleGrid[m-<span class="number">1</span>][i] == <span class="number">1</span>:</span><br><span class="line">                lst[m-<span class="number">1</span>][i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lst[m-<span class="number">1</span>][i] = lst[m-<span class="number">1</span>][i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> obstacleGrid[i][n-<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                lst[i][n-<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lst[i][n-<span class="number">1</span>] = lst[i+<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> obstacleGrid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    lst[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> obstacleGrid[i+<span class="number">1</span>][j] == <span class="number">0</span>:</span><br><span class="line">                        lst[i][j] += lst[i+<span class="number">1</span>][j]</span><br><span class="line">                    <span class="keyword">if</span> obstacleGrid[i][j+<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                        lst[i][j] += lst[i][j+<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># print(lst)</span></span><br><span class="line">        <span class="keyword">return</span> lst[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>





<p>注意两个特殊测试用例</p>
<p>1、特殊情况[[0,0],[0,1]]</p>
<p>2、特殊情况[[1,0]]，返回的是[0][0]，而不是max</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode-2-两数相加</title>
    <url>/p/7db8/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/add-two-numbers/">https://leetcode.cn/problems/add-two-numbers/</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        l3 = ListNode()</span><br><span class="line">        p = l3</span><br><span class="line"></span><br><span class="line">        need_add = <span class="number">0</span></span><br><span class="line">        num = l1.val+l2.val</span><br><span class="line">        p.val = num%<span class="number">10</span> + need_add</span><br><span class="line">        need_add = num//<span class="number">10</span></span><br><span class="line">        </span><br><span class="line">        l1 = l1.<span class="built_in">next</span></span><br><span class="line">        l2 = l2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">and</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            num = l1.val+l2.val + need_add</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode(num%<span class="number">10</span>)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            need_add = num//<span class="number">10</span></span><br><span class="line"></span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span>:</span><br><span class="line">            num = l1.val + need_add</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode(num%<span class="number">10</span>)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            need_add = num//<span class="number">10</span></span><br><span class="line"></span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            num = l2.val + need_add</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode(num%<span class="number">10</span>)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            need_add = num//<span class="number">10</span></span><br><span class="line"></span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> need_add&gt;<span class="number">0</span>:</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode(need_add)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l3</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode-120-三角形最小路径和</title>
    <url>/p/c7fa/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/triangle/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/triangle/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(triangle)</span><br><span class="line">        lst = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(j)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            lst[n-<span class="number">1</span>][i] = triangle[n-<span class="number">1</span>][i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">                lst[i][j] = triangle[i][j] + <span class="built_in">min</span>(lst[i+<span class="number">1</span>][j], lst[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lst[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode-300-最长递增子序列</title>
    <url>/p/4c32/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/longest-increasing-subsequence/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        lst = [<span class="number">1</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j]&lt;nums[i]:</span><br><span class="line">                    <span class="keyword">if</span> lst[j]+<span class="number">1</span> &gt; lst[i]:</span><br><span class="line">                        lst[i] = lst[j]+<span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(lst,max(lst))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(lst)</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>leetcode_64_最小路径和</title>
    <url>/p/4abd/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># 行数为m，列数为n</span></span><br><span class="line">        m,n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        lst = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        lst[m-<span class="number">1</span>][n-<span class="number">1</span>] = grid[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            lst[i][n-<span class="number">1</span>] = grid[i][n-<span class="number">1</span>]+lst[i+<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            lst[m-<span class="number">1</span>][i] = grid[m-<span class="number">1</span>][i]+lst[m-<span class="number">1</span>][i+<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                lst[i][j] = grid[i][j] + <span class="built_in">min</span>(lst[i+<span class="number">1</span>][j], lst[i][j+<span class="number">1</span>])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> lst[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode_62_不同路径</title>
    <url>/p/5263/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/unique-paths/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/unique-paths/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># m行n列的矩阵</span></span><br><span class="line">        lst=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            lst[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            lst[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                lst[i][j] =  lst[i-<span class="number">1</span>][j] + lst[i][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lst[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode_1137_第N个泰波那契数</title>
    <url>/p/e32e/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/n-th-tribonacci-number/description/?envType=study-plan-v2&amp;envId=dynamic-programming">https://leetcode.cn/problems/n-th-tribonacci-number/description/?envType=study-plan-v2&amp;envId=dynamic-programming</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tribonacci</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        lst = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> lst[n]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            lst.append(lst[i-<span class="number">1</span>] + lst[i-<span class="number">2</span>] + lst[i-<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">return</span> lst[n]</span><br></pre></td></tr></table></figure>



<p>注意，不能用递归。目前的这个方法，等于记录了之前运算的结果。递归会每次都进行运算，从而导致超时。</p>
]]></content>
  </entry>
  <entry>
    <title>【蓝桥杯】整数变换</title>
    <url>/p/92d3/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/p/92d3/courses_2786_attachments_1715308666553_4.png" alt="courses_2786_attachments_1715308666553_4"></p>
<p>地址：<a href="https://www.lanqiao.cn/problems/17151/learning/">竞赛中心 - 蓝桥云课 (lanqiao.cn)</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请在此输入您的代码</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">str</span>(n)))</span><br><span class="line">    res += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<p>编程语言选择Python3只能通过60%，选择PyPy可以通过100%。原因是PyPy比Python3解释器更快</p>
]]></content>
  </entry>
  <entry>
    <title>python的map函数</title>
    <url>/p/2dfc/</url>
    <content><![CDATA[<h1 id="动画学会Python中的map函数"><a href="#动画学会Python中的map函数" class="headerlink" title="动画学会Python中的map函数"></a>动画学会Python中的map函数</h1><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=734428752&bvid=BV1hD4y1j7ga&cid=942742143&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>


<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>把int按位转换为list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">123456</span></span><br><span class="line">lst = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(lst))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>【蓝桥杯】codeforce_1272B.Snow Walking Robot</title>
    <url>/p/4f48/</url>
    <content><![CDATA[<p>题目地址：<a href="https://codeforces.com/contest/1272/problem/B">https://codeforces.com/contest/1272/problem/B</a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>建议阅读题目英文原题，这里只做补充说明。</p>
<p>有一个机器人，你需要通过一系列的指令(UDRL)来控制它的运动，现在给你一段指令，你可以通过这段指令中的全部或者一部分，来进行判断机器人是否能够走出去后再次回到原点，并且这个过程中，除了起点以外的点都不能重复经过。</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>我们只需要让机器人走出一个矩形，他就可以做到走出去后再次回到原点，并且满足除原点以外，其他点只经过一次。但是如果命令中只出现了上下，或者左右这两种指令，那么我们只能进行一次上下或者左右。其他情况，则必定是输出0。</p>
<p>当左右最小值为0时，前后最小值只能是0或者是1。反之一样。</p>
<p>当前后最小值，和左右最小值都不为0时，让它转一圈。</p>
<p>题中说了：请注意，您可以选择剩余指令 <strong>的任何</strong> 顺序（您不需要最小化掉期次数或任何其他类似指标）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note that you can choose any order of remaining instructions (you don&#x27;t need to minimize the number of swaps or any other similar metric).</span><br></pre></td></tr></table></figure>



<p>例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">LRU</span><br><span class="line">DURLDRUDRULRDURDDL</span><br><span class="line">LRUDDLRUDRUL</span><br><span class="line">LLLLRRRR</span><br><span class="line">URDUR</span><br><span class="line">LLL</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">LR</span><br><span class="line"><span class="number">14</span></span><br><span class="line">RUURDDDDLLLUUR</span><br><span class="line"><span class="number">12</span></span><br><span class="line">ULDDDRRRUULL</span><br><span class="line"><span class="number">2</span></span><br><span class="line">LR</span><br><span class="line"><span class="number">2</span></span><br><span class="line">UD</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">    lst.append(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">    u = x.count(<span class="string">&quot;U&quot;</span>)</span><br><span class="line">    v = x.count(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    l = x.count(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">    r = x.count(<span class="string">&quot;R&quot;</span>)</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">min</span>(u,v)</span><br><span class="line">    b = <span class="built_in">min</span>(l,r)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> a&lt;<span class="number">1</span>:</span><br><span class="line">        b=b <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> b&lt;<span class="number">1</span>:</span><br><span class="line">        a=a <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>*(a+b))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;U&quot;</span>*a+<span class="string">&quot;L&quot;</span>*b+<span class="string">&quot;D&quot;</span>*a+<span class="string">&quot;R&quot;</span>*b)</span><br></pre></td></tr></table></figure>





<h1 id="别人的代码"><a href="#别人的代码" class="headerlink" title="别人的代码"></a>别人的代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没太看懂</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span>[<span class="number">0</span>]*<span class="built_in">int</span>(<span class="built_in">input</span>()):</span><br><span class="line">    u,v,*x=<span class="built_in">map</span>(<span class="built_in">input</span>().count,<span class="string">&#x27;LRUD&#x27;</span>);</span><br><span class="line">    a=<span class="built_in">min</span>(u,v);</span><br><span class="line">    b=<span class="built_in">min</span>(x)</span><br><span class="line">    <span class="keyword">if</span> b&lt;<span class="number">1</span>:</span><br><span class="line">    	a=a <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a&lt;<span class="number">1</span>:</span><br><span class="line">    	b=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>*(a+b),<span class="string">&#x27;L&#x27;</span>*a+<span class="string">&#x27;U&#x27;</span>*b+<span class="string">&#x27;R&#x27;</span>*a+<span class="string">&#x27;D&#x27;</span>*b)</span><br></pre></td></tr></table></figure>





<p>我的代码，通过</p>
<p><img src="/p/4f48/image-20240413225742945.png" alt="image-20240413225742945"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
  </entry>
  <entry>
    <title>【蓝桥杯】codeforce 1272A.Three Friends</title>
    <url>/p/35e3/</url>
    <content><![CDATA[<p>题目地址：<a href="https://codeforces.com/contest/1272/problem/A">https://codeforces.com/contest/1272/problem/A</a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目是英文的，机器翻译如下所示</p>
<p><img src="/p/35e3/image-20240412210615169.png" alt="image-20240412210615169"></p>
<p><img src="/p/35e3/image-20240412210803355.png" alt="image-20240412210803355"></p>
<p>例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">30</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1000000000</span> <span class="number">1000000000</span></span><br><span class="line"><span class="number">1</span> <span class="number">1000000000</span> <span class="number">999999999</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1999999994</span></span><br><span class="line"><span class="number">1999999994</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>



<h1 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">juli</span>(<span class="params">num1,num2,num3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(num1-num2)+<span class="built_in">abs</span>(num1-num3)+<span class="built_in">abs</span>(num2-num3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baoli</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    st = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a-<span class="number">1</span>,a+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b-<span class="number">1</span>,b+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(c-<span class="number">1</span>,c+<span class="number">2</span>):</span><br><span class="line">                st.add(juli(i,j,k))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st)</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    lst = <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    lst = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,lst))</span><br><span class="line">    a,b,c = lst[<span class="number">0</span>],lst[<span class="number">1</span>],lst[<span class="number">2</span>]</span><br><span class="line">    res.append(baoli(a,b,c))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(x) </span><br></pre></td></tr></table></figure>



<h1 id="别人的标准答案"><a href="#别人的标准答案" class="headerlink" title="别人的标准答案"></a>别人的标准答案</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">    t -= <span class="number">1</span></span><br><span class="line">    a,b,c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># float(&#x27;inf&#x27;)表示正无穷，数据类型为float</span></span><br><span class="line">    ans = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a-<span class="number">1</span>,a+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b-<span class="number">1</span>,b+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(c-<span class="number">1</span>,c+<span class="number">2</span>):</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">abs</span>(i-j)+<span class="built_in">abs</span>(i-k)+<span class="built_in">abs</span>(j-k))</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>





<h1 id="提交方法"><a href="#提交方法" class="headerlink" title="提交方法"></a>提交方法</h1><p>在右侧的Submit，language选择为Python3。选择文件为xxx.py文件，然后点击提交按钮</p>
<p><img src="/p/35e3/image-20240412211129525.png" alt="image-20240412211129525"></p>
<p>通过</p>
<p><img src="/p/35e3/image-20240412211302375.png" alt="image-20240412211302375"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>暴力</category>
      </categories>
  </entry>
  <entry>
    <title>摆脱困境的最佳方法【The best way to get unstuck】</title>
    <url>/p/3bc7/</url>
    <content><![CDATA[<p>20 多年前，我开始涉足创业领域，经历了无数次被困的感觉，多到我都无法回忆起具体次数。这是创业道路上最常见的挑战之一，而且很难摆脱。</p>
<p>“困境之城”是任何有创造力、自主创业和好奇心旺盛的人经常前往的地方。这是一个难以逃离的地方。</p>
<p>被困的感觉会加剧焦虑、加速丧失动力。它是职业生涯中的巨大杀手。因此，由于这种感觉，有许多不可思议的创造永远无法实现。</p>
<p>当我们处理太多未完成的任务时，或在一段艰苦的工作期间或工作之后，或者当我们有几个好的选择，或者一个选择都没有时，困境感就会出现。</p>
<p><strong>解决方法很简单：做点什么。</strong></p>
<blockquote>
<p>即做某个事情</p>
</blockquote>
<p>逃离困境的方法就是采取行动。</p>
<p>原本我写的是“做任何事”，因为重要的是要做，而不是停滞不前。然而，对于某些人来说，”任何事” 可能比 “某个事情” 更令人生畏，因为它暗示着无限的可能性。而“某个事情”听起来像是更少的选择范围。</p>
<p>起初，只要你不是坐以待毙，做什么并不重要。要注意的是，试图通过思考来摆脱困境也算是什么都没做。你需要行动。你需要动力。稍后再反思。</p>
<p>不要害怕，去做其他事情不等同于放弃当前的情形。虽然有时候可能会变成那样，但我们现在要做的不是做出决定。如果需要的话，给自己设定一个截止日期，允许自己暂时离开当前的情形。知道最晚可能回到这个情形的日期会让你摆脱内疚感，让你更容易逃离困境。</p>
<p>在此期间，在其他项目上取得进展。清理一下思绪。重拾信心。重新了解进步的意义。</p>
<p>我喜欢为他人提供帮助或写作。几年前，我花了长达六个月的时间，除了写作就是给别人提供建议（大部分是无偿的）。</p>
<p>现在的问题是学会如何恰当地面对困境。</p>
<p>并不是每一次陷入困境都需要像我描述的那样采取激烈的行动计划。<br>有时，你只需忍耐一下，接受短暂的困顿。<br>有时，你需要做的只是休息一天，第二天精神饱满地回来。<br>有时，你需要寻求新的动力。</p>
<p>你学到的是如何面对呢？我不知道，但经验是很好的老师。</p>
<p>原文链接：<br><a href="https://www.ggnotes.com/the-best-way-to-get-unstuck/">https://www.ggnotes.com/the-best-way-to-get-unstuck/</a></p>
]]></content>
  </entry>
  <entry>
    <title>十进制转八进制</title>
    <url>/p/5176/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/p/5176/image-20230813231442395.png" alt="image-20230813231442395"></p>
<p>题目来源：桂林理工 - 877-C语言程序设计 - 2022年 - 第四题第5题</p>
<h2 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int f(int num10)&#123;</span><br><span class="line">    int flag = 1;</span><br><span class="line">    if(num10&lt;0)&#123;</span><br><span class="line">        flag = -1;</span><br><span class="line">        num10 = -1*num10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int num8 = 0;</span><br><span class="line">    int carry = 1;//carry用于进位 </span><br><span class="line"></span><br><span class="line">    while (num10 &gt; 0) &#123;</span><br><span class="line">        int i = num10 % 8;</span><br><span class="line">        num8 += i * carry;</span><br><span class="line">        carry *= 10;</span><br><span class="line">        num10 /= 8;</span><br><span class="line">    &#125;</span><br><span class="line">    return num8*flag;</span><br><span class="line">&#125; </span><br><span class="line">int main() &#123;</span><br><span class="line">    int nums[100];</span><br><span class="line">    for(int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">        printf(&quot;%d&gt;&gt;&gt;%d\n&quot;, nums[i],f(nums[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="100个输入整数的例子"><a href="#100个输入整数的例子" class="headerlink" title="100个输入整数的例子"></a>100个输入整数的例子</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15 80 90 53 1 65 88 4 65 184 23 710 -79 50 98 25 72 43 85 33 44 37 96 45 67 17 85 34 39 40 54 31 70 18 53 39 42 66 28 74 22 15 95 50 8 85 92 70 12 73 -94 97 99 17 90 36 72 51 6 95 35 9 88 11 38 62 24 38 30 19 51 67 148 36 28 16 18 29 68 31 138 19 80 21 87 47 73 41 15 42 27 56 67 79 75 97 25 73 92 26</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/5176/image-20230813231700238.png" alt="image-20230813231700238"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>读写文件并输出英文字符个数</title>
    <url>/p/5949/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/p/5949/image-20230813223527926.png" alt="image-20230813223527926"></p>
<p>题目来源：桂林理工 - 877-C语言程序设计 - 2022年 - 第四题第4题</p>
<h2 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int chNum[26]=&#123;0&#125;;</span><br><span class="line">    </span><br><span class="line">    FILE *file = fopen(&quot;data.txt&quot;, &quot;r&quot;); </span><br><span class="line">    FILE *outputFile = fopen(&quot;data_bak.txt&quot;, &quot;w&quot;);</span><br><span class="line">    if (file == NULL || outputFile == NULL) &#123;</span><br><span class="line">        printf(&quot;文件打开有误\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ch;</span><br><span class="line">    while ((ch = getc(file)) != EOF) &#123;</span><br><span class="line">        if(ch&gt;=&#x27;a&#x27; &amp;&amp; ch&lt;=&#x27;z&#x27;)&#123;</span><br><span class="line">            chNum[ch-&#x27;a&#x27;]++;</span><br><span class="line">        &#125;else if(ch&gt;=&#x27;A&#x27; &amp;&amp; ch&lt;=&#x27;Z&#x27;)&#123;</span><br><span class="line">            chNum[ch-&#x27;A&#x27;]++;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            fputc(ch, outputFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 关闭文件</span><br><span class="line">    fclose(file); </span><br><span class="line">    fclose(outputFile);</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;26;i++)&#123;</span><br><span class="line">        printf(&quot;%c:%d &quot;,i+&#x27;a&#x27;,chNum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="data-txt文件内容的例子"><a href="#data-txt文件内容的例子" class="headerlink" title="data.txt文件内容的例子"></a>data.txt文件内容的例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abcAD+-</span><br><span class="line">..0</span><br></pre></td></tr></table></figure>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/p/5949/image-20230813223801649.png" alt="image-20230813223801649"></p>
<p><img src="/p/5949/image-20230813223841328.png" alt="image-20230813223841328"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>输入职工信息并按姓名查找</title>
    <url>/p/9d3c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/p/9d3c/image-20230813183358386.png" alt="image-20230813183358386"></p>
<p>题目来源：桂林理工 - 877-C语言程序设计 - 2022年 - 第四题第3题</p>
<h2 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h2><h3 id="简洁的代码"><a href="#简洁的代码" class="headerlink" title="简洁的代码"></a>简洁的代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line">//职工的结构体 </span><br><span class="line">typedef struct Employee&#123;</span><br><span class="line">    int id; //员工号 </span><br><span class="line">    char name[100]; //姓名</span><br><span class="line">    int age; //年龄 </span><br><span class="line">    double salary; //基本工资 </span><br><span class="line">&#125;Employee;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Employee emps[10];</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;emps[i].id);</span><br><span class="line">        scanf(&quot;%s&quot;, emps[i].name);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;emps[i].age);</span><br><span class="line">        scanf(&quot;%lf&quot;, &amp;emps[i].salary);</span><br><span class="line">    &#125;</span><br><span class="line">    // 输入要查找的名字 </span><br><span class="line">    char searchName[100];</span><br><span class="line">    scanf(&quot;%s&quot;, searchName);</span><br><span class="line">    // 在数组中查找名字</span><br><span class="line">    int found = 0;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        if (strcmp(searchName, emps[i].name) == 0) &#123;</span><br><span class="line">            found = 1;</span><br><span class="line">            printf(&quot;员工号为：%d,年龄为：%d\n&quot;, emps[i].id, emps[i].age);</span><br><span class="line">            break; // 找到后直接跳出循环</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (found==0) &#123;</span><br><span class="line">        printf(&quot;not found!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="输入10个职工信息的例子"><a href="#输入10个职工信息的例子" class="headerlink" title="输入10个职工信息的例子"></a>输入10个职工信息的例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Alice</span><br><span class="line">25</span><br><span class="line">50000</span><br><span class="line">2</span><br><span class="line">Bob</span><br><span class="line">30</span><br><span class="line">60000</span><br><span class="line">3</span><br><span class="line">Carol</span><br><span class="line">28</span><br><span class="line">55000</span><br><span class="line">4</span><br><span class="line">David</span><br><span class="line">22</span><br><span class="line">45000</span><br><span class="line">5</span><br><span class="line">Emily</span><br><span class="line">29</span><br><span class="line">58000</span><br><span class="line">6</span><br><span class="line">Frank</span><br><span class="line">35</span><br><span class="line">65000</span><br><span class="line">7</span><br><span class="line">Grace</span><br><span class="line">27</span><br><span class="line">53000</span><br><span class="line">8</span><br><span class="line">Henry</span><br><span class="line">31</span><br><span class="line">62000</span><br><span class="line">9</span><br><span class="line">Ivy</span><br><span class="line">26</span><br><span class="line">51000</span><br><span class="line">10</span><br><span class="line">Jack</span><br><span class="line">23</span><br><span class="line">47000</span><br></pre></td></tr></table></figure>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/p/9d3c/image-20230813183942811.png" alt="image-20230813183942811"></p>
<p><img src="/p/9d3c/image-20230813184017458.png" alt="image-20230813184017458"></p>
<h3 id="加深理解strcmp函数"><a href="#加深理解strcmp函数" class="headerlink" title="加深理解strcmp函数"></a>加深理解strcmp函数</h3><p><img src="/p/9d3c/image-20230813184631433.png" alt="image-20230813184631433"></p>
<h3 id="方便理解的代码"><a href="#方便理解的代码" class="headerlink" title="方便理解的代码"></a>方便理解的代码</h3><blockquote>
<p>和简洁版没什么区别，只不过是方便理解</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line">//职工的结构体 </span><br><span class="line">typedef struct Employee&#123;</span><br><span class="line">    int id; //员工号 </span><br><span class="line">    char name[100]; //姓名</span><br><span class="line">    int age; //年龄 </span><br><span class="line">    double salary; //基本工资 </span><br><span class="line">&#125;Employee;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Employee emps[10];</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        printf(&quot;Enter id for employee: &quot;);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;emps[i].id);</span><br><span class="line">        </span><br><span class="line">        printf(&quot;Enter name for employee %d: &quot;, emps[i].id);</span><br><span class="line">        scanf(&quot;%s&quot;, emps[i].name);</span><br><span class="line"></span><br><span class="line">        printf(&quot;Enter age for employee %d: &quot;, emps[i].id);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;emps[i].age);</span><br><span class="line"></span><br><span class="line">        printf(&quot;Enter salary for employee %d: &quot;, emps[i].id);</span><br><span class="line">        scanf(&quot;%lf&quot;, &amp;emps[i].salary);</span><br><span class="line">        printf(&quot;employee %d enter over: \n\n&quot;,emps[i].id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        printf(&quot;Employee %d:\n&quot;, i + 1);</span><br><span class="line">        printf(&quot;ID: %d\n&quot;, emps[i].id);</span><br><span class="line">        printf(&quot;Name: %s\n&quot;, emps[i].name);</span><br><span class="line">        printf(&quot;Age: %d\n&quot;, emps[i].age);</span><br><span class="line">        printf(&quot;Salary: %.2lf\n&quot;, emps[i].salary);</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     // 输入要查找的名字 </span><br><span class="line">    char searchName[100];</span><br><span class="line">    printf(&quot;Enter the name to search: &quot;);</span><br><span class="line">    scanf(&quot;%s&quot;, searchName);</span><br><span class="line"></span><br><span class="line">    // 在数组中查找名字</span><br><span class="line">    int found = 0;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        if (strcmp(searchName, emps[i].name) == 0) &#123;</span><br><span class="line">            found = 1;</span><br><span class="line">            printf(&quot;员工号为：%d,年龄为：%d\n&quot;, emps[i].id, emps[i].age);</span><br><span class="line">            break; // 找到后直接跳出循环</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (found==0) &#123;</span><br><span class="line">        printf(&quot;not found!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>二维数组求最小值</title>
    <url>/p/b4fb/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/p/b4fb/image-20230813174236504.png" alt="image-20230813174236504"></p>
<p>题目来源：桂林理工 - 877-C语言程序设计 - 2022年 - 第四题第2题</p>
<h2 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//返回最小值，下标用址传递的方式传回给主函数 </span><br><span class="line">int fun(int data[][6],int *mini,int *minj)&#123;</span><br><span class="line">    int minNum = data[0][0];</span><br><span class="line">    for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;6;j++)&#123;</span><br><span class="line">            if(data[i][j]&lt;minNum)&#123;</span><br><span class="line">                minNum = data[i][j];</span><br><span class="line">                *mini = i;</span><br><span class="line">                *minj = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return minNum;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int data[5][6] = &#123;-93, 45, 0, -28, -60, 81, 63, 17, 9, -75,</span><br><span class="line">                  32, -14, -37, 8, -48, 54, 92, -18, 70, -2,</span><br><span class="line">                  39, -84, 59, -43, -96, 3, 23, -67, -51, 26&#125;;</span><br><span class="line">    int minNum,mini,minj;</span><br><span class="line">    minNum = fun(data,&amp;mini,&amp;minj);</span><br><span class="line">    printf(&quot;最小值%d所在行下标是%d,列下标是%d,即第%d行第%d列&quot;,minNum,mini,minj,mini+1,minj+1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/b4fb/image-20230813174834567.png" alt="image-20230813174834567"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>判断自守数</title>
    <url>/p/346b/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/p/346b/Snipaste_2023-08-13_17-03-51.png" alt="Snipaste_2023-08-13_17-03-51"></p>
<p>题目来源：桂林理工 - 877-C语言程序设计 - 2022年 - 第四题第1题</p>
<h2 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//判断平方数的低位部分是否是该数本身 ，是返回1，不是返回0 </span><br><span class="line">int equalLowBit(int sqNum,int num)&#123;</span><br><span class="line">    while(num&gt;0)&#123;</span><br><span class="line">        if(num%10 == sqNum%10)&#123;</span><br><span class="line">            num = num/10;</span><br><span class="line">            sqNum = sqNum/10;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    return 1;</span><br><span class="line">&#125; </span><br><span class="line">int main()&#123;</span><br><span class="line">    int n = 1000,i;</span><br><span class="line">    for(i=0;i&lt;1000;i++)&#123;</span><br><span class="line">        if(equalLowBit(i*i,i))&#123;</span><br><span class="line">            printf(&quot;%d &quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/346b/image-20230813170905785.png" alt="image-20230813170905785"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>搭建网络八股</title>
    <url>/p/4e51/</url>
    <content><![CDATA[<h1 id="六步法"><a href="#六步法" class="headerlink" title="六步法"></a>六步法</h1><p>用tf的API：tf.keras搭建：<br>六步法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import</span><br><span class="line">train,test</span><br><span class="line">model=tf.keras.models.Sequential</span><br><span class="line">model.compile</span><br><span class="line">model.fit</span><br><span class="line">model.summary</span><br></pre></td></tr></table></figure>


<p>​    </p>
<h1 id="每步的简要介绍"><a href="#每步的简要介绍" class="headerlink" title="每步的简要介绍"></a>每步的简要介绍</h1><hr>
<p><strong>import</strong>：导入相关模块</p>
<hr>
<p><strong>train,test</strong>：<br>    告知要喂入网络的训练集和测试集是什么。<br>    即，指定训练集的输入特征x_train和训练集的标签y_train<br>    指定测试集的输入特征x_test和测试集的标签y_test</p>
<hr>
<p><strong>model=tf.keras.models.Sequential</strong>:<br>    在Sequential()中搭建网络结构，逐层描述每层网络，相当于走了一遍前向传播。</p>
<hr>
<p><strong>model.compile</strong>:<br>    在compile()中配置训练方法，<br>    告知训练时选择哪个优化器，选择哪个损失函数，选择哪个评测指标。</p>
<hr>
<p><strong>model.fit</strong>:<br>    在fit()中执行训练过程，告知训练集和测试集的输入特征和标签。<br>    告知每个batch是多少，告知要迭代多少次数据集。</p>
<hr>
<p><strong>model.summary</strong>:<br>    用summary()打印出网格的结构和参数统计</p>
<hr>
<h1 id="Sequential详细介绍"><a href="#Sequential详细介绍" class="headerlink" title="Sequential详细介绍"></a>Sequential详细介绍</h1><p>model = tf.keras.models.Sequential ([ 网络结构 ]) #描述各层网络  </p>
<p>网络结构举例：  </p>
<hr>
<p><strong>拉直层：</strong> tf.keras.layers.Flatten( )  </p>
<hr>
<p><strong>全连接层：</strong> tf.keras.layers.Dense(神经元个数, activation= “激活函数”, kernel_regularizer=哪种正则化)  </p>
<blockquote>
<p>activation（字符串给出）可选: relu、 softmax、 sigmoid 、 tanh<br>kernel_regularizer可选: tf.keras.regularizers.l1()、 tf.keras.regularizers.l2()  </p>
</blockquote>
<hr>
<p><strong>卷积层：</strong> tf.keras.layers.Conv2D(filters = 卷积核个数, kernel_size = 卷积核尺寸, strides = 卷积步长， padding = “ valid” or “same”)  </p>
<hr>
<p><strong>LSTM层：</strong> tf.keras.layers.LSTM()  </p>
<hr>
<h1 id="compile详细介绍"><a href="#compile详细介绍" class="headerlink" title="compile详细介绍"></a><strong>compile</strong>详细介绍</h1><p>model.compile(optimizer = 优化器, loss = 损失函数, metrics = [“准确率”] )  </p>
<p><strong>Optimizer可选:</strong>  </p>
<blockquote>
<p>‘sgd’ or tf.keras.optimizers.SGD (lr=学习率,momentum=动量参数)<br>‘adagrad’ or tf.keras.optimizers.Adagrad (lr=学习率)<br>‘adadelta’ or tf.keras.optimizers.Adadelta (lr=学习率)<br>‘adam’ or tf.keras.optimizers.Adam (lr=学习率, beta_1=0.9, beta_2=0.999)</p>
</blockquote>
<p><strong>loss可选:</strong></p>
<blockquote>
<p>均方误差：<br>‘mse’ or tf.keras.losses.MeanSquaredError()</p>
<p>整数编码_多类交叉熵损失：<br>‘sparse_categorical_crossentropy’ or<br>tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)</p>
</blockquote>
<p><strong>Metrics可选:</strong></p>
<blockquote>
<p>‘accuracy’ ： y_和y都是数值，如y_=[1] y=[1]<br>‘categorical_accuracy’ : y_和y都是独热码(概率分布)，如y_=[0,1,0] y=[0.256,0.695,0.048]<br>‘sparse_categorical_accuracy’: y_是数值,  y是独热码(概率分布),如y_=[1] y=[0.256,0.695,0.048]  </p>
</blockquote>
<h1 id="fit详细介绍"><a href="#fit详细介绍" class="headerlink" title="fit详细介绍"></a>fit详细介绍</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model.fit (训练集的输入特征, 训练集的标签,</span><br><span class="line">		batch_size= , epochs= ,</span><br><span class="line">		validation_data=(测试集的输入特征，测试集的标签),</span><br><span class="line">		validation_split=从训练集划分多少比例给测试集，</span><br><span class="line">		validation_freq = 多少次epoch测试一次)  </span><br></pre></td></tr></table></figure>

<p>batch_size：每次喂入神经网络的样本数，即分多少组喂入<br>epochs：迭代的数据集的次数</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode的SQL入门题</title>
    <url>/p/3f16/</url>
    <content><![CDATA[<p>题集如下：<br><a href="https://leetcode-cn.com/study-plan/sql/">https://leetcode-cn.com/study-plan/sql/</a></p>
<h1 id="第一天：选择"><a href="#第一天：选择" class="headerlink" title="第一天：选择"></a>第一天：选择</h1><h2 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595.大的国家"></a>595.大的国家</h2><p><a href="https://leetcode-cn.com/problems/big-countries/">https://leetcode-cn.com/problems/big-countries/</a></p>
<p>我的题解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">select name,population,area from World</span><br><span class="line">where area&gt;=3000000 or population&gt;=25000000</span><br></pre></td></tr></table></figure>



<p>结果：</p>
<p><strong>5 / 5</strong> 个通过测试用例<br>状态：<em>通过</em><br>执行用时: <strong>198 ms</strong><br>内存消耗: <strong>0 B</strong></p>
<h2 id="1757-可回收且低脂的产品"><a href="#1757-可回收且低脂的产品" class="headerlink" title="1757. 可回收且低脂的产品"></a>1757. 可回收且低脂的产品</h2><p><a href="https://leetcode-cn.com/problems/recyclable-and-low-fat-products/">https://leetcode-cn.com/problems/recyclable-and-low-fat-products/</a></p>
<p>我的题解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">select product_id from Products where low_fats = &#x27;Y&#x27; and recyclable = &#x27;Y&#x27;</span><br></pre></td></tr></table></figure>

<p>结果：<br>执行结果：<br>通过</p>
<p>执行用时：620 ms<br>, 在所有 MySQL 提交中击败了19.46%的用户</p>
<p>内存消耗：0 B<br>, 在所有 MySQL 提交中击败了100.00%的用户</p>
<p>通过测试用例：<br>22 / 22</p>
<h2 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a>584. 寻找用户推荐人</h2><p><a href="https://leetcode-cn.com/problems/find-customer-referee/">https://leetcode-cn.com/problems/find-customer-referee/</a></p>
<p>我的题解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">select name from customer</span><br><span class="line">where referee_id != 2 or referee_id is NULL</span><br></pre></td></tr></table></figure>





<p>执行结果：</p>
<p>通过</p>
<p>显示详情</p>
<p>执行用时：474 ms, 在所有 MySQL 提交中击败了84.25%的用户</p>
<p>内存消耗：0 B, 在所有 MySQL 提交中击败了100.00%的用户</p>
<p>通过测试用例：19 / 19</p>
<h2 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183. 从不订购的客户"></a>183. 从不订购的客户</h2><p><a href="https://leetcode-cn.com/problems/customers-who-never-order/">https://leetcode-cn.com/problems/customers-who-never-order/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">select Customers.Name as Customers from Customers</span><br><span class="line">where Customers.Id not in (select CustomerId from Orders)</span><br></pre></td></tr></table></figure>



<p>执行结果：</p>
<p>通过</p>
<p>显示详情</p>
<p>执行用时：540 ms, 在所有 MySQL 提交中击败了70.44%的用户</p>
<p>内存消耗：0 B, 在所有 MySQL 提交中击败了100.00%的用户</p>
<p>通过测试用例：11 / 11</p>
<h1 id="第二天-排序-amp-修改"><a href="#第二天-排序-amp-修改" class="headerlink" title="第二天 排序 &amp; 修改"></a>第二天 排序 &amp; 修改</h1><h2 id="1873-计算特殊奖金"><a href="#1873-计算特殊奖金" class="headerlink" title="1873. 计算特殊奖金"></a>1873. 计算特殊奖金</h2><p><a href="https://leetcode-cn.com/problems/calculate-special-bonus/">https://leetcode-cn.com/problems/calculate-special-bonus/</a></p>
<p>方法一、UNION + NOT LIKE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id ,salary AS bonus</span><br><span class="line">FROM Employees</span><br><span class="line">WHERE employee_id%2!=0 AND name NOT LIKE (&#x27;M%&#x27;)</span><br><span class="line">UNION </span><br><span class="line">SELECT employee_id ,salary*0 AS bonus</span><br><span class="line">FROM Employees</span><br><span class="line">WHERE employee_id%2=0 OR name LIKE (&#x27;M%&#x27;)</span><br><span class="line">ORDER BY employee_id;</span><br></pre></td></tr></table></figure>


<p>方法二、IF +RIGHT +MOD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,</span><br><span class="line">IF(MOD(employee_id,2)!=0 AND LEFT(name,1)!=&#x27;M&#x27;,salary,0) bonus</span><br><span class="line">FROM Employees</span><br><span class="line">ORDER BY employee_id</span><br></pre></td></tr></table></figure>


<p>方法三、CASE+RIGHT +MOD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,</span><br><span class="line">(CASE WHEN MOD(employee_id,2)!=0 AND LEFT(name,1)!=&#x27;M&#x27; THEN salary</span><br><span class="line">     WHEN MOD(employee_id,2)=0 OR LEFT(name,1)=&#x27;M&#x27; THEN 0</span><br><span class="line">END) bonus</span><br><span class="line">FROM Employees</span><br><span class="line">ORDER BY employee_id</span><br></pre></td></tr></table></figure>


<p>方法四、CASE WHEN THEN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,</span><br><span class="line">    (CASE WHEN MOD(employee_id,2)!=0 AND name NOT LIKE &#x27;M%&#x27; THEN salary ELSE 0 END) AS bonus</span><br><span class="line">FROM Employees</span><br></pre></td></tr></table></figure>

<p>CASE的教程：<a href="https://www.bilibili.com/video/BV1Cu411Z74k/">https://www.bilibili.com/video/BV1Cu411Z74k/</a></p>
<h2 id="627-变更性别"><a href="#627-变更性别" class="headerlink" title="627. 变更性别"></a>627. 变更性别</h2><p><a href="https://leetcode-cn.com/problems/swap-salary/">https://leetcode-cn.com/problems/swap-salary/</a></p>
<p>方法一、CASE WHEN THEN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update salary</span><br><span class="line">set sex = (</span><br><span class="line">    case sex when &#x27;m&#x27; then &#x27;f&#x27; else &#x27;m&#x27; end</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p>方法二、if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update salary set sex = if(sex = &#x27;m&#x27;,&#x27;f&#x27;,&#x27;m&#x27;)</span><br></pre></td></tr></table></figure>


<p>方法三、ASCII码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update salary set sex = char(ascii(&#x27;m&#x27;) + ascii(&#x27;f&#x27;) - ascii(sex));</span><br></pre></td></tr></table></figure>



<h2 id="196-删除重复的电子邮箱"><a href="#196-删除重复的电子邮箱" class="headerlink" title="196. 删除重复的电子邮箱"></a>196. 删除重复的电子邮箱</h2><p><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/">https://leetcode-cn.com/problems/delete-duplicate-emails/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete u</span><br><span class="line">from Person u , Person v</span><br><span class="line">where v.id &lt; u.id and u.email = v.email </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客播放本地音频</title>
    <url>/p/c0f3/</url>
    <content><![CDATA[<p>一直都想在hexo博客中插入本地音频，但是搜到的教程都是插入网页链接的方法，没有告诉怎么播放本地音频。</p>
<p>看到阮一峰的<a href="https://www.ruanyifeng.com/blog/2021/10/weekly-issue-178.html">第178期周刊</a>有一段音频，我分析了他的网页源码，尝试后发现成功插入本地音频，美滋滋。</p>
<p><img src="/p/c0f3/Snipaste_2021-10-11_11-23-25.png" alt="Snipaste_2021-10-11_11-23-25"></p>
<p>这是插入本地音频的关键代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio controls name=&quot;media&quot;&gt;</span><br><span class="line">	&lt;source src=&quot;./10月11日 上午11点17分_31457477223662528.mp3&quot; type=&quot;audio/mp3&quot;&gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>



<p>这是一段本地音频demo</p>
<audio controls name="media">
    <source src="./10月11日 上午11点17分_31457477223662528.mp3" type="audio/mp3">
</audio>


]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>6-10 阶乘计算升级版</title>
    <url>/p/8517/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/742">https://pintia.cn/problem-sets/14/problems/742</a></p>
<p>本题要求实现一个打印非负整数阶乘的函数</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="built_in">Print_Factorial</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(N&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Invalid input&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> M = N;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> res[<span class="number">3000</span>];</span><br><span class="line">		res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">1</span>;<span class="comment">//记录长度 </span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">				res[j] *= i;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> k;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">			 	k = j;</span><br><span class="line">				<span class="keyword">int</span> temp = res[j];</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">while</span>(temp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">						res[k] = temp%<span class="number">10</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						res[k] += temp%<span class="number">10</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					k++;</span><br><span class="line">					temp /= <span class="number">10</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			len = k;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,res[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>遇到的坑：</strong>虽然把数拆成了数组，但是由于计算量过大，单个数组元素还是超出了int范围</p>
<p><strong>结果：</strong>N为1000时结果出错。（400时就已经开始出错了）</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(N&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Invalid input&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> M = N;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> res[<span class="number">3000</span>];</span><br><span class="line">	</span><br><span class="line">		res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">1</span>;<span class="comment">//记录长度 </span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> w = <span class="number">0</span>;<span class="comment">//w记录进位 </span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">				res[j] = res[j]*i+w;</span><br><span class="line">				w = res[j]/<span class="number">10</span>;</span><br><span class="line">				res[j] = res[j]%<span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(w&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				res[len++] = w%<span class="number">10</span>;</span><br><span class="line">				w = w/<span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>思路：</strong>数组元素依次对1到N相乘，每乘一次，处理一下进位。</p>
<p><strong>结果：</strong>OK</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>6-9 统计个位数字</title>
    <url>/p/e501/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/741">https://pintia.cn/problem-sets/14/problems/741</a></p>
<p>本题要求实现一个函数，可统计任一整数中某个位数出现的次数。例如-21252中，2出现了3次，则该函数应该返回3。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_Digit</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N, <span class="keyword">const</span> <span class="keyword">int</span> D )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, D;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Count_Digit</span>(N, D));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>





<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_Digit</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N, <span class="keyword">const</span> <span class="keyword">int</span> D )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> M = N,count = <span class="number">0</span>,i;</span><br><span class="line">	<span class="keyword">if</span>(M&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		M = <span class="number">-1</span>*M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(M==<span class="number">0</span> &amp;&amp; D==<span class="number">0</span>)&#123;</span><br><span class="line">		count = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(M&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		i = M%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(i == D)&#123;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		M = M/<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>6-8 简单阶乘计算</title>
    <url>/p/6648/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/740">https://pintia.cn/problem-sets/14/problems/740</a></p>
<p>本题要求实现一个计算非负整数阶乘的简单函数。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, NF;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    NF = <span class="built_in">Factorial</span>(N);</span><br><span class="line">    <span class="keyword">if</span> (NF)  <span class="built_in">printf</span>(<span class="string">&quot;%d! = %d\n&quot;</span>, N, NF);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Invalid input\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(N&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=N; i++)&#123;</span><br><span class="line">		res *= i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>scrcpy-电脑显示并控制Android手机</title>
    <url>/p/6291/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>从Hello GitHub的C语言项目<a href="https://hellogithub.com/periodical/category/C%20%E9%A1%B9%E7%9B%AE/?page=3">第44期</a>看到。</p>
<blockquote>
<p><strong>第 44 期  |   Star 53.6k  |  Watch 965  |  Fork 5.6k |  中文</strong><br>一款可以用电脑显示并控制 Android 手机的开源工具。连接方便使用方便，手机无需 root、无需安装任何应用。支持 USB、Wi-Fi 两种方式连接，支持 Windows、macOS、Linux 三种操作系统。注意电脑端需要安装 adb 工具</p>
</blockquote>
<p><a href="https://github.com/Genymobile/scrcpy/blob/master/README.zh-Hans.md">https://github.com/Genymobile/scrcpy/blob/master/README.zh-Hans.md</a></p>
<p><a href="https://gitee.com/mirrors/scrcpy/blob/master/README.zh-Hans.md">https://gitee.com/mirrors/scrcpy/blob/master/README.zh-Hans.md</a></p>
<h1 id="Windows安装scoop（需要能连接上github）"><a href="#Windows安装scoop（需要能连接上github）" class="headerlink" title="Windows安装scoop（需要能连接上github）"></a>Windows安装scoop（需要能连接上github）</h1><p><a href="https://www.jianshu.com/p/50993df76b1c">https://www.jianshu.com/p/50993df76b1c</a><br><a href="https://www.cnblogs.com/wang-mengmeng/p/11516947.html">https://www.cnblogs.com/wang-mengmeng/p/11516947.html</a></p>
<p><a href="https://boyinthesun.cn/post/scoop/">https://boyinthesun.cn/post/scoop/</a></p>
<h1 id="手机需要权限"><a href="#手机需要权限" class="headerlink" title="手机需要权限"></a>手机需要权限</h1><p>开发者模式 - USB调试</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><strong>运行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrcpy</span><br></pre></td></tr></table></figure>



<p><strong>无线连接</strong></p>
<p><em>Scrcpy</em> 使用 <code>adb</code> 与设备通信，并且 <code>adb</code> 支持通过 TCP/IP连接到设备:</p>
<ol>
<li><p>将设备和电脑连接至同一 Wi-Fi。</p>
</li>
<li><p>打开 设置 → 关于手机 → 状态信息，获取设备的 IP 地址，也可以执行以下的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell ip route</span><br></pre></td></tr></table></figure></li>
<li><p>启用设备的网络 adb 功能 <code>adb tcpip 5555</code>。（端口号可以自己设置）</p>
</li>
<li><p>断开设备的 USB 连接。</p>
</li>
<li><p>连接到您的设备：<code>adb connect DEVICE_IP:5555</code> <em>(将 <code>DEVICE_IP</code> 替换为设备 IP)</em>.</p>
</li>
<li><p>正常运行 <code>scrcpy</code>。</p>
</li>
</ol>
<p><strong>多设备</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出多个设备</span></span><br><span class="line">adb devices</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接 - 指定设备的序列号</span></span><br><span class="line">scrcpy -s 0123456789abcdef</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接 - 通过 TCP/IP 连接</span></span><br><span class="line">scrcpy -s 192.168.0.1:5555</span><br></pre></td></tr></table></figure>



<p><strong>删除服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>



<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>魅族note5</strong><br>192.168.31.66<br>adb connect 192.168.31.66:5556<br>adb disconnect 192.168.31.66:5556<br>scrcpy -s 192.168.31.66:5556</p>
<p><strong>红米note9</strong><br>192.168.31.229<br>adb connect 192.168.31.229:5557<br>adb disconnect 192.168.31.229:5557<br>scrcpy -s 192.168.31.229:5557 -m 1600<br>不能操作</p>
<p><strong>俊豪oppo</strong><br>192.168.31.98<br>adb connect 192.168.31.98:5558<br>adb disconnect 192.168.31.98:5558<br>scrcpy -s 192.168.31.98:5558</p>
<p><strong>小米note3</strong></p>
<p>192.168.31.139<br>adb connect 192.168.31.139:5559<br>adb disconnect 192.168.31.139:5559<br>scrcpy -s 192.168.31.139:5559</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>6-7 统计某类完全平方数</title>
    <url>/p/4ff7/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/739">https://pintia.cn/problem-sets/14/problems/739</a></p>
<p>本题要求实现一个函数，判断任一给定整数<code>N</code>是否满足条件：它是完全平方数，又至少有两位数字相同，如144、676等。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsTheNumber</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1, n2, i, cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n1, &amp;n2);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=n1; i&lt;=n2; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">IsTheNumber</span>(i) )</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnt = %d\n&quot;</span>, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsTheNumber</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	flag记录满足两个条件（完全平方数和两位数相同）的个数 </span></span><br><span class="line">	<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	数学库实现：是否完全平方数 </span></span><br><span class="line">	<span class="keyword">int</span> sq = <span class="built_in">sqrt</span>(N);</span><br><span class="line">	<span class="keyword">if</span>(sq*sq == N)&#123;</span><br><span class="line">		flag++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	桶数组实现：是否至少两位数相同</span></span><br><span class="line">	<span class="keyword">int</span> M = N;</span><br><span class="line">	<span class="keyword">int</span> i,t[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">while</span>(M&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		i = M%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(t[i]==<span class="number">0</span>)&#123;</span><br><span class="line">			t[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			flag++;</span><br><span class="line">			<span class="keyword">break</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		M = M/<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> flag/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>B树的插入</title>
    <url>/p/5c58/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/p/5c58/Snipaste_2021-08-27_20-22-14.png" alt="Snipaste_2021-08-27_20-22-14"></p>
<h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><p>选B</p>
<p>根据题意，此B树的每个结点，最多有4个孩子、3个关键字。</p>
<p><img src="/p/5c58/Snipaste_2021-08-27_20-25-54.png" alt="Snipaste_2021-08-27_20-25-54"></p>
<p>B树生成过程如下：</p>
<img src="/p/5c58/方式一.gif">

<img src="/p/5c58/方式二.gif">]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>350.两个数组的交集II</title>
    <url>/p/fb64/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【学习计划 - 数据结构 - 第二天 - 数组】<a href="https://leetcode-cn.com/study-plan/data-structures/">https://leetcode-cn.com/study-plan/data-structures/</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/</a></p>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">intersect</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="第一版本"><a href="#第一版本" class="headerlink" title="第一版本"></a>第一版本</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">intersect</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *numsL,LSize,*numsS,SSize;</span><br><span class="line">	<span class="keyword">if</span>(nums1Size &gt; nums2Size)&#123;</span><br><span class="line">		numsL = nums1;</span><br><span class="line">		LSize = nums1Size;</span><br><span class="line">		numsS = nums2;</span><br><span class="line">		SSize = nums2Size;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		numsL = nums2;</span><br><span class="line">		LSize = nums2Size;</span><br><span class="line">		numsS = nums1;</span><br><span class="line">		SSize = nums1Size;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;LSize &amp;&amp; j&lt;SSize)&#123;</span><br><span class="line">		<span class="keyword">if</span>( *(numsL+i)==*(numsS+j) )&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			i = i-j+<span class="number">1</span>;</span><br><span class="line">			j=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span>* res;	</span><br><span class="line">	<span class="keyword">if</span>(j==SSize)&#123;</span><br><span class="line">		*returnSize = j;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//res = numsS;</span></span><br><span class="line">    </span><br><span class="line">		res = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(*returnSize) );</span><br><span class="line">		<span class="comment">// j：匹配成功，短数组的长度 </span></span><br><span class="line">		<span class="comment">//i-j：匹配成功，左端点在长数组的下标位置 </span></span><br><span class="line">		<span class="comment">// i-1：匹配成功，右端点在长数组的下标位置 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> index = i-j; index &lt;= i<span class="number">-1</span>; index++)&#123;</span><br><span class="line">			res[index-i+j] = numsL[index];</span><br><span class="line">		&#125;</span><br><span class="line">    </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		*returnSize = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第一版本思路</strong>：先找到长数组和短数组，长数组不变，短数组跟长数组比较，看长数组是否有子串与短数组一样，如果有，找到在长数组中对于子串的两端下标。用新数组，根据子串两端下标，赋值新数组。</p>
<p><strong>结果</strong>：功能不完全</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
      </categories>
  </entry>
  <entry>
    <title>88、合并两个有序数组</title>
    <url>/p/48a0/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【学习计划 - 数据结构 - 第二天 - 数组】<a href="https://leetcode-cn.com/study-plan/data-structures/">https://leetcode-cn.com/study-plan/data-structures/</a></p>
<p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a></p>
<p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p>
<p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p>
<p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *newNums1=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*m);</span><br><span class="line">	<span class="keyword">int</span> i,j,num1,num2;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		*(newNums1+i) = *(nums1+i);</span><br><span class="line">		*(nums1+i) = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;n)&#123;</span><br><span class="line">		num1 = *(newNums1+i);</span><br><span class="line">		num2 = *(nums2+j);</span><br><span class="line">		<span class="keyword">if</span>(num1&lt;num2)&#123;</span><br><span class="line">			*(nums1+i+j) = num1;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			*(nums1+i+j) = num2;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">		*(nums1+i+j) = *(newNums1+i);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;n)&#123;</span><br><span class="line">		*(nums1+i+j) = *(nums2+j);</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *newNums1=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*m);</span><br><span class="line">	<span class="keyword">int</span> i,j,num1,num2;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		*(newNums1+i) = *(nums1+i);</span><br><span class="line">		*(nums1+i) = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;n)&#123;</span><br><span class="line">		num1 = *(newNums1+i);</span><br><span class="line">		num2 = *(nums2+j);</span><br><span class="line">		<span class="keyword">if</span>(num1&lt;num2)&#123;</span><br><span class="line">			*(nums1+i+j) = num1;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			*(nums1+i+j) = num2;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">		*(nums1+i+j) = *(newNums1+i);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;n)&#123;</span><br><span class="line">		*(nums1+i+j) = *(nums2+j);</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> m=<span class="number">3</span>,n=<span class="number">3</span>,nums1Size=<span class="number">6</span>,nums2Size=<span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> nums1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> nums2[]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums1Size;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,nums1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n-------------\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">merge</span>(nums1,nums1Size,m,nums2,nums2Size,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums1Size;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,nums1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：8 ms, 在所有 C 提交中击败了8.12%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C 提交中击败了8.21%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
      </categories>
  </entry>
  <entry>
    <title>1、两数之和</title>
    <url>/p/ce57/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【学习计划 - 数据结构 - 第二天 - 数组】<a href="https://leetcode-cn.com/study-plan/data-structures/">https://leetcode-cn.com/study-plan/data-structures/</a></p>
<p><a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line"><span class="comment">//	returnSize不是返回值，意思是返回的元素的个数。这里手动设置为2 </span></span><br><span class="line">	*returnSize = <span class="number">2</span>; </span><br><span class="line">	<span class="keyword">int</span>* res= (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(*(nums+i)+*(nums+j)==target)&#123;</span><br><span class="line">				*(res)=i;</span><br><span class="line">				*(res+<span class="number">1</span>)=j;</span><br><span class="line">				<span class="keyword">return</span> res;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>思路：从第一个到最后一个，和后面的数相比较，如果相加为目标值，返回下标。</p>
<p>坑：</p>
<p>returnSize不是返回值，意思是返回的元素的个数。这里手动设置为2 </p>
<p>测试的时候，需要在main函数中先为returnSize申请好地址。</p>
<p>参考：<a href="https://blog.csdn.net/weixin_38132153/article/details/103826835">https://blog.csdn.net/weixin_38132153/article/details/103826835</a></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line"><span class="comment">//	returnSize不是返回值，意思是返回的元素的个数。这里手动设置为2 </span></span><br><span class="line">	*returnSize = <span class="number">2</span>; </span><br><span class="line">	<span class="keyword">int</span>* res= (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(*(nums+i)+*(nums+j)==target)&#123;</span><br><span class="line">				*(res)=i;</span><br><span class="line">				*(res+<span class="number">1</span>)=j;</span><br><span class="line">				<span class="keyword">return</span> res;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> numsSize=<span class="number">5</span>,target=<span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> nums[]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">-4</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>* returnSize = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">int</span> *res;</span><br><span class="line">	</span><br><span class="line">	res = <span class="built_in">twoSum</span>(nums,numsSize,target, returnSize);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d  %d--\n&quot;</span>,res[<span class="number">0</span>],res[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：80 ms, 在所有 C 提交中击败了72.45%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C 提交中击败了68.54%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
      </categories>
  </entry>
  <entry>
    <title>6-6 求单链表结点的阶乘和</title>
    <url>/p/ca9f/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/738">https://pintia.cn/problem-sets/14/problems/738</a></p>
<p>本题要求实现一个函数，求单链表<code>L</code>结点的阶乘和。这里默认所有结点的值非负，且题目保证结果在<code>int</code>范围内。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FactorialSum</span><span class="params">( List L )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line">    List L, p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        p = (List)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(struct Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;Data);</span><br><span class="line">        p-&gt;Next = L;  L = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">FactorialSum</span>(L));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FactorialSum</span><span class="params">( List L )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>,num,i;</span><br><span class="line">	<span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L-&gt;Data;i++)&#123;</span><br><span class="line">			num *=i;</span><br><span class="line">		&#125;</span><br><span class="line">		sum += num;</span><br><span class="line">		L = L-&gt;Next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>遇到的坑</strong>：0的阶乘人为规定为1，我以为是0，搞错了。</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>53、最大子序和</title>
    <url>/p/7a78/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【学习计划 - 数据结构 - 第一天 - 数组】<a href="https://leetcode-cn.com/study-plan/data-structures/">https://leetcode-cn.com/study-plan/data-structures/</a></p>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p>
<p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>第一版本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> maxnum=*(nums),sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		sum += *(nums+i);</span><br><span class="line">		<span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">			sum -= *(nums+i<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;maxnum)&#123;</span><br><span class="line">			maxnum = sum;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>成功版本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> maxnum=*(nums),sum;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//i表示的是子串的长度 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=numsSize;i++)&#123;</span><br><span class="line">		sum =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">		</span><br><span class="line">			sum += *(nums+j);</span><br><span class="line">			<span class="keyword">if</span>(j-i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">				sum -= *(nums+j-i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(sum&gt;maxnum)&#123;</span><br><span class="line">				maxnum = sum;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：滑块。长度从1到最长。每向右滑一，减去最左边的那个元素。</p>
<p>第一版本为长度为1时的滑块，成功版本为长度从1到最长时的滑块。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> maxnum=*(nums),sum;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//i表示的是子串的长度 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=numsSize;i++)&#123;</span><br><span class="line">		sum =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">		</span><br><span class="line">			sum += *(nums+j);</span><br><span class="line">			<span class="keyword">if</span>(j-i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">				sum -= *(nums+j-i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(sum&gt;maxnum)&#123;</span><br><span class="line">				maxnum = sum;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> numsSize=<span class="number">5</span>;</span><br><span class="line">	<span class="keyword">int</span> nums[]=&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">-2</span>,<span class="number">-4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = <span class="built_in">maxSubArray</span>(nums,numsSize);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：908 ms, 在所有 C 提交中击败了5.15%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C 提交中击败了79.89%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
      </categories>
  </entry>
  <entry>
    <title>217、存在重复元素</title>
    <url>/p/ee0c/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【学习计划 - 数据结构 - 第一天 - 数组】<a href="https://leetcode-cn.com/study-plan/data-structures/">https://leetcode-cn.com/study-plan/data-structures/</a></p>
<p><a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a></p>
<p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果存在一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numsSize<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(*(nums+j)&gt;*(nums+j+<span class="number">1</span>))&#123;</span><br><span class="line">				temp = *(nums+j);</span><br><span class="line">				*(nums+j) = *(nums+j+<span class="number">1</span>);</span><br><span class="line">				*(nums+j+<span class="number">1</span>) = temp;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(*(nums+j)==*(nums+j+<span class="number">1</span>))&#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：用冒泡排序排序，同时看有没有重复元素。</p>
<p>时间复杂度：$O(n^2)$</p>
<p>结果：超时</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min=<span class="number">0</span>,max=<span class="number">0</span>,temp;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		temp = *(nums+i);</span><br><span class="line">		<span class="keyword">if</span>(temp&lt;min)&#123;</span><br><span class="line">			min = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">			max = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num0[max-min+<span class="number">1</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max-min+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		num0[i] =<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		temp = *(nums+i);</span><br><span class="line">		<span class="keyword">if</span>(*(num0+temp-min)==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		*(num0+temp-min)=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>思路</strong>：桶排序。由于数组下标从0开始，而需要比较的数字中可以有负数，所以找到最小值，桶排序时的下标为<code>数值-最小值</code>。</p>
<p><strong>坑</strong>：leetcode竟然没有把数组全部默认初始化为0，可能是初始化为随机数了。所以需要我再手动对桶数组初始化为0。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min=<span class="number">0</span>,max=<span class="number">0</span>,temp;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		temp = *(nums+i);</span><br><span class="line">		<span class="keyword">if</span>(temp&lt;min)&#123;</span><br><span class="line">			min = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">			max = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num0[max-min+<span class="number">1</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max-min+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		num0[i] =<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		temp = *(nums+i);</span><br><span class="line">		<span class="keyword">if</span>(*(num0+temp-min)==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		*(num0+temp-min)=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> numsSize=<span class="number">5</span>;</span><br><span class="line">	<span class="keyword">int</span> nums[]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">-4</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(nums+i));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="built_in">containsDuplicate</span>(nums,numsSize);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--\n&quot;</span>,flag);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(nums+i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：20 ms, 在所有 C 提交中击败了73.56%的用户</p>
<p>内存消耗：11.2 MB, 在所有 C 提交中击败了26.56%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
      </categories>
  </entry>
  <entry>
    <title>509、斐波那契数</title>
    <url>/p/77d6/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/fibonacci-number/">https://leetcode-cn.com/problems/fibonacci-number/</a></p>
<p>斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>
<p>F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1<br>给你 n ，请计算 F(n) 。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,<span class="built_in">fib</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：12 ms, 在所有 C 提交中击败了28.33%的用户</p>
<p>内存消耗：5.6 MB, 在所有 C 提交中击败了8.92%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
        <category>递归</category>
      </categories>
  </entry>
  <entry>
    <title>342、4的幂</title>
    <url>/p/658f/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a></p>
<p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。</p>
<p>整数 n 是 4 的幂次方需满足：存在整数 x 使得 n == $4^x$</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">4</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">isPowerOfFour</span>(n/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">4</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">isPowerOfFour</span>(n/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="built_in">isPowerOfFour</span>(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：0 ms, 在所有 C 提交中击败了100.00%的用户</p>
<p>内存消耗：5.6 MB, 在所有 C 提交中击败了5.14%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
        <category>递归</category>
      </categories>
  </entry>
  <entry>
    <title>326、3的幂</title>
    <url>/p/7a2b/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/power-of-three">https://leetcode-cn.com/problems/power-of-three</a></p>
<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。</p>
<p>整数 n 是 3 的幂次方需满足：存在整数 x 使得 n == $3^x$</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="我的解答"><a href="#我的解答" class="headerlink" title="我的解答"></a>我的解答</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">isPowerOfThree</span>(n/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">isPowerOfThree</span>(n/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="built_in">isPowerOfThree</span>(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时：36 ms, 在所有 C 提交中击败了9.59%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C 提交中击败了21.05%的用户</p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
        <category>递归</category>
      </categories>
  </entry>
  <entry>
    <title>231、2的幂</title>
    <url>/p/b348/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/power-of-two/">https://leetcode-cn.com/problems/power-of-two/</a></p>
<p>给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。<br>如果存在一个整数 x 使得 n == $2^x$ ，则认为 n 是 2 的幂次方。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>一顿胡乱尝试后写出来的，不太美观，但是复杂度分析结果比较好。</p>
<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">isPowerOfTwo</span>(n/<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">isPowerOfTwo</span>(n/<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="built_in">isPowerOfTwo</span>(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="编译出错-以及-解决方法"><a href="#编译出错-以及-解决方法" class="headerlink" title="编译出错 以及 解决方法"></a>编译出错 以及 解决方法</h2><p>编译出错</p>
<p><img src="/p/b348/Snipaste_2021-08-24_19-06-12.png" alt="Snipaste_2021-08-24_19-06-12"></p>
<p>原因是返回值，leetcode判断可能会有无返回值的情况，所以出错。</p>
<p>解决办法：</p>
<p>在方法的最后一行加<code>return;</code>，注意不要返回内容，否则可能会出错。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时: <strong>0 ms</strong></p>
<p>内存消耗: <strong>5.3 MB</strong></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>看了别人的解析后想出来的，虽然代码美观了一些，但是复杂度分析结果没那么好。</p>
<h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">isPowerOfTwo</span>(n/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">isPowerOfTwo</span>(n/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="built_in">isPowerOfTwo</span>(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--%d--&quot;</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>执行用时: <strong>4 ms</strong></p>
<p>内存消耗: <strong>5.4 MB</strong></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>LeetCode</category>
        <category>OJ</category>
        <category>递归</category>
      </categories>
  </entry>
  <entry>
    <title>6-5 求自定类型元素的最大值</title>
    <url>/p/24ed/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/737">https://pintia.cn/problem-sets/14/problems/737</a></p>
<p>本题要求实现一个函数，求<code>N</code>个集合元素<code>S[]</code>中的最大值，其中集合元素的类型为自定义的<code>ElementType</code>。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Max</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, <span class="built_in">Max</span>(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Max</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	ElementType M=S[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(S[i]&gt;M)&#123;</span><br><span class="line">			M=S[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>6-4 求自定类型元素的平均</title>
    <url>/p/4965/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/736">https://pintia.cn/problem-sets/14/problems/736</a></p>
<p>本题要求实现一个函数，求<code>N</code>个集合元素<code>S[]</code>的平均值，其中集合元素的类型为自定义的<code>ElementType</code>。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Average</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, <span class="built_in">Average</span>(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Average</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	ElementType sum;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		sum += S[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum/N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>6-3 简单求和</title>
    <url>/p/d5c/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/735">https://pintia.cn/problem-sets/14/problems/735</a></p>
<p>本题要求实现一个函数，求给定的<code>N</code>个整数的和。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> List[MAXN], N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;List[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Sum</span>(List, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		res += List[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>数学公式在线编辑器</title>
    <url>/p/7840/</url>
    <content><![CDATA[<h1 id="放几个数学公式在线编辑器"><a href="#放几个数学公式在线编辑器" class="headerlink" title="放几个数学公式在线编辑器"></a>放几个数学公式在线编辑器</h1><p><a href="https://www.latexlive.com/">https://www.latexlive.com/</a></p>
<p><a href="https://latex.91maths.com/">https://latex.91maths.com/</a></p>
<p><a href="https://latex.codecogs.com/eqneditor/editor.php">https://latex.codecogs.com/eqneditor/editor.php</a></p>
<h1 id="数理知识库"><a href="#数理知识库" class="headerlink" title="数理知识库"></a>数理知识库</h1><p><a href="https://wuli.wiki/online/index.html">https://wuli.wiki/online/index.html</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>6.2 多项式求值</title>
    <url>/p/cfa6/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/734">https://pintia.cn/problem-sets/14/problems/734</a></p>
<p>本题要求实现一个函数，计算阶数为<code>n</code>，系数为<code>a[0]</code> … <code>a[n]</code>的多项式$\sum_{i=0}^{n} (a[i]\times x^{i} )$在<code>x</code>点的值。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">double</span> a[MAXN], x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lf&quot;</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;=n; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(“%lf”, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>, <span class="built_in">f</span>(n, a, x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><p>第一印象写出来的，时间复杂度大于O(n)，超时</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">0</span>,sum=<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		sum = a[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">			sum *= x;</span><br><span class="line">		&#125;</span><br><span class="line">		res += sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>时间复杂度优化为O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">0</span>,sum=<span class="number">1</span>,x_i=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		sum = a[i];</span><br><span class="line">		<span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			x_i *= x;</span><br><span class="line">		&#125;</span><br><span class="line">		sum *= x_i;</span><br><span class="line">		res += sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>6.1 简单输出整数</title>
    <url>/p/a87f/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/14/problems/733">https://pintia.cn/problem-sets/14/problems/733</a></p>
<p>本题要求实现一个函数，对给定的正整数<code>N</code>，打印从1到<code>N</code>的全部正整数。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span> <span class="params">( <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="built_in">PrintN</span>( N );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span> <span class="params">( <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>基础编程题目集</category>
      </categories>
  </entry>
  <entry>
    <title>使用函数求特殊a串数列和</title>
    <url>/p/2735/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/12/problems/309">https://pintia.cn/problem-sets/12/problems/309</a><br>给定两个均不超过9的正整数<em>a</em>和<em>n</em>，要求编写函数求<em>a</em>+<em>aa</em>+<em>aaa</em>+⋯+<em>aa</em>⋯<em>a</em>（<em>n</em>个<em>a</em>）之和。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fn</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumA</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fn(%d, %d) = %d\n&quot;</span>, a, n, <span class="built_in">fn</span>(a,n));        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s = %d\n&quot;</span>, <span class="built_in">SumA</span>(a,n));    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fn</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num =<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		num = num*<span class="number">10</span>+a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumA</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">fn</span>(a,i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>浙大版C语言程序设计（第3版）</category>
      </categories>
  </entry>
  <entry>
    <title>分类统计字符个数</title>
    <url>/p/9ff7/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/12/problems/308">https://pintia.cn/problem-sets/12/problems/308</a></p>
<p>本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。</p>
<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXS 15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringCount</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadString</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>; <span class="comment">/* 由裁判实现，略去不表 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[MAXS];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ReadString</span>(s);</span><br><span class="line">    <span class="built_in">StringCount</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Your function will be put here */</span></span><br></pre></td></tr></table></figure>



<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringCount</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> letter=<span class="number">0</span>,blank=<span class="number">0</span>,digit=<span class="number">0</span>,other=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;</span><br><span class="line">		c = s[i];</span><br><span class="line">		<span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>||c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">			letter ++;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">			blank ++;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">			digit ++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			other ++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;letter = %d, blank = %d, digit = %d, other = %d&quot;</span>,letter,blank,digit,other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>浙大版C语言程序设计（第3版）</category>
      </categories>
  </entry>
  <entry>
    <title>markdown编辑器分析</title>
    <url>/p/md37/</url>
    <content><![CDATA[<h1 id="markdown编辑器分析"><a href="#markdown编辑器分析" class="headerlink" title="markdown编辑器分析"></a>markdown编辑器分析</h1><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>各方面都很好，但是本地图片每次都要设置根目录。而且，经常会出错误，需要在源代码模式编写。</p>
<h2 id="作业部落"><a href="#作业部落" class="headerlink" title="作业部落"></a>作业部落</h2><p>不开会员各种限制，连上传本地图片都不能？</p>
<h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p>不能导入文件,可以在这里写，所以本地md文件还是要在Typora打开。<br>而且pc版还没有网页版好用。</p>
<p>粘贴时失去格式。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>浙大版C语言程序设计（第3版）-函数题-练习5</title>
    <url>/p/6698/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>题目来源：<a href="https://pintia.cn/problem-sets/12/problems/type/6">https://pintia.cn/problem-sets/12/problems/type/6</a></p>
<h1 id="练习5-1-求m到n之和"><a href="#练习5-1-求m到n之和" class="headerlink" title="练习5-1 求m到n之和"></a>练习5-1 求m到n之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个计算m~n（m&lt;n）之间所有整数的和的简单函数。</p>
<p><img src="/p/6698/image-20221023170502553.png" alt="image-20221023170502553"></p>
<h2 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int sum(int m, int n);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    int m, n;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;m, &amp;n);</span><br><span class="line">    printf(&quot;sum = %d\n&quot;, sum(m, n));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum( int m, int n )&#123;</span><br><span class="line">	int res = 0,i;</span><br><span class="line">	for (i=m;i&lt;=n;i++)&#123;</span><br><span class="line">		res+=i;</span><br><span class="line">	&#125;</span><br><span class="line">	return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="练习5-2-找两个数中最大者"><a href="#练习5-2-找两个数中最大者" class="headerlink" title="练习5-2 找两个数中最大者"></a>练习5-2 找两个数中最大者</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>本题要求对两个整数a和b，输出其中较大的数。</p>
<p><img src="/p/6698/image-20221023170559711.png" alt="image-20221023170559711"></p>
<h2 id="程序样例-1"><a href="#程序样例-1" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int max( int a, int b );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    int a, b;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</span><br><span class="line">    printf(&quot;max = %d\n&quot;, max(a, b));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int max( int a, int b )&#123;</span><br><span class="line">	return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="练习5-3-数字金字塔"><a href="#练习5-3-数字金字塔" class="headerlink" title="练习5-3 数字金字塔"></a>练习5-3 数字金字塔</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现函数输出n行数字金字塔。</p>
<p><img src="/p/6698/image-20221023170244871.png" alt="image-20221023170244871"></p>
<h2 id="程序样例-2"><a href="#程序样例-2" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void pyramid( int n );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    int n;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    pyramid(n);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-2"><a href="#关键代码-2" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void pyramid( int n )&#123;</span><br><span class="line">	for(int i = 1;i &lt;= n;i++)&#123;</span><br><span class="line">		for(int k = n;k&gt;i;k--)&#123;</span><br><span class="line">			printf(&quot; &quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		for(int j=1;j&lt;=i;j++)&#123;</span><br><span class="line">			printf(&quot;%d &quot;,i);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="习题5-1-符号函数"><a href="#习题5-1-符号函数" class="headerlink" title="习题5-1 符号函数"></a>习题5-1 符号函数</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现符号函数sign(x)。</p>
<p>其中<code>x</code>是用户传入的整型参数。符号函数的定义为：若<code>x</code>大于0，<code>sign(x)</code> = 1；若<code>x</code>等于0，<code>sign(x)</code> = 0；否则，<code>sign(x)</code> = −1。</p>
<p><img src="/p/6698/image-20221023170803823.png" alt="image-20221023170803823"></p>
<h2 id="程序样例-3"><a href="#程序样例-3" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int sign( int x );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;x);</span><br><span class="line">    printf(&quot;sign(%d) = %d\n&quot;, x, sign(x));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-3"><a href="#关键代码-3" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sign( int x )&#123;</span><br><span class="line">	int res=-1;</span><br><span class="line">	if(x&gt;0)&#123;</span><br><span class="line">		res = 1;</span><br><span class="line">	&#125;</span><br><span class="line">	if(x==0)&#123;</span><br><span class="line">		res = 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="习题5-2-使用函数求奇数和"><a href="#习题5-2-使用函数求奇数和" class="headerlink" title="习题5-2 使用函数求奇数和"></a>习题5-2 使用函数求奇数和</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。</p>
<p>其中函数<code>even</code>将根据用户传入的参数<code>n</code>的奇偶性返回相应值：当<code>n</code>为偶数时返回1，否则返回0。函数<code>OddSum</code>负责计算并返回传入的<code>N</code>个整数<code>List[]</code>中所有奇数的和。</p>
<p><img src="/p/6698/image-20221023171116879.png" alt="image-20221023171116879"></p>
<h2 id="程序样例-4"><a href="#程序样例-4" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAXN 10</span><br><span class="line"></span><br><span class="line">int even( int n );</span><br><span class="line">int OddSum( int List[], int N );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    int List[MAXN], N, i;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">    printf(&quot;Sum of ( &quot;);</span><br><span class="line">    for ( i=0; i&lt;N; i++ ) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;List[i]);</span><br><span class="line">        if ( even(List[i])==0 )</span><br><span class="line">            printf(&quot;%d &quot;, List[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;) = %d\n&quot;, OddSum(List, N));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-4"><a href="#关键代码-4" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int even( int n )&#123;</span><br><span class="line">	if(n%2==0)&#123;</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">int OddSum( int List[], int N )&#123;</span><br><span class="line">	int sum=0;</span><br><span class="line">	for(int i =0;i&lt;N;i++)&#123;</span><br><span class="line">		if(!even(List[i]))&#123;</span><br><span class="line">			sum+=List[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="习题5-3-使用函数计算两点间的距离"><a href="#习题5-3-使用函数计算两点间的距离" class="headerlink" title="习题5-3 使用函数计算两点间的距离"></a>习题5-3 使用函数计算两点间的距离</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个函数，对给定平面任意两点坐标(<em>x</em>1,<em>y</em>1)和(<em>x</em>2,<em>y</em>2)，求这两点之间的距离。</p>
<h2 id="程序样例-5"><a href="#程序样例-5" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">double dist( double x1, double y1, double x2, double y2 );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    double x1, y1, x2, y2;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%lf %lf %lf %lf&quot;, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">    printf(&quot;dist = %.2f\n&quot;, dist(x1, y1, x2, y2));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-5"><a href="#关键代码-5" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double dist( double x1, double y1, double x2, double y2 )&#123;</span><br><span class="line">	return sqrt(</span><br><span class="line">		pow(x1-x2,2) +</span><br><span class="line">		pow(y1-y2,2)</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="习题5-4-使用函数求素数和"><a href="#习题5-4-使用函数求素数和" class="headerlink" title="习题5-4 使用函数求素数和"></a>习题5-4 使用函数求素数和</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。</p>
<p>素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。</p>
<p>其中函数<code>prime</code>当用户传入参数<code>p</code>为素数时返回1，否则返回0；函数<code>PrimeSum</code>返回区间[<code>m</code>, <code>n</code>]内所有素数的和。题目保证用户传入的参数<code>m</code>≤<code>n</code>。</p>
<h2 id="程序样例-6"><a href="#程序样例-6" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int prime( int p );</span><br><span class="line">int PrimeSum( int m, int n );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n, p;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;m, &amp;n);</span><br><span class="line">    printf(&quot;Sum of ( &quot;);</span><br><span class="line">    for( p=m; p&lt;=n; p++ ) &#123;</span><br><span class="line">        if( prime(p) != 0 )</span><br><span class="line">            printf(&quot;%d &quot;, p);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;) = %d\n&quot;, PrimeSum(m, n));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-6"><a href="#关键代码-6" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int prime( int p )&#123;</span><br><span class="line">	if(p&lt;=1)&#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i =2;i&lt;p;i++)&#123;</span><br><span class="line">		if(p%i==0)&#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line">int PrimeSum( int m, int n )&#123;</span><br><span class="line">	int sum = 0;</span><br><span class="line">	for(int i = m;i&lt;=n;i++)&#123;</span><br><span class="line">		if(prime(i))&#123;</span><br><span class="line">			sum+=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="习题5-5-使用函数统计指定数字的个数"><a href="#习题5-5-使用函数统计指定数字的个数" class="headerlink" title="习题5-5 使用函数统计指定数字的个数"></a>习题5-5 使用函数统计指定数字的个数</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个统计整数中指定数字的个数的简单函数。</p>
<p><img src="/p/6698/image-20221023171447123.png" alt="image-20221023171447123"></p>
<h2 id="程序样例-7"><a href="#程序样例-7" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int CountDigit( int number, int digit );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int number, digit;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;number, &amp;digit);</span><br><span class="line">    printf(&quot;Number of digit %d in %d: %d\n&quot;, digit, number, CountDigit(number, digit));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>



<h2 id="关键代码-7"><a href="#关键代码-7" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int CountDigit( int number, int digit )&#123;</span><br><span class="line">	if(number==0&amp;&amp;digit==0)&#123;</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	int count = 0;</span><br><span class="line">	if(number&lt;0)&#123;</span><br><span class="line">		number = -1*number;</span><br><span class="line">	&#125;</span><br><span class="line">	while(number&gt;0)&#123;</span><br><span class="line">		if(number%10 == digit)&#123;</span><br><span class="line">			count ++;</span><br><span class="line">		&#125;</span><br><span class="line">		number /= 10;</span><br><span class="line">	&#125;</span><br><span class="line">	return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="习题5-6-使用函数输出水仙花数"><a href="#习题5-6-使用函数输出水仙花数" class="headerlink" title="习题5-6 使用函数输出水仙花数"></a>习题5-6 使用函数输出水仙花数</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><p>水仙花数是指一个<em>N</em>位正整数（<em>N</em>≥3），它的每个位上的数字的<em>N</em>次幂之和等于它本身。例如：153=13+53+33。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间(<em>m</em>,<em>n</em>)内所有的水仙花数。</p>
<p>函数<code>narcissistic</code>判断<code>number</code>是否为水仙花数，是则返回1，否则返回0。</p>
<p>函数<code>PrintN</code>则打印开区间(<code>m</code>, <code>n</code>)内所有的水仙花数，每个数字占一行。题目保证100≤<code>m</code>≤<code>n</code>≤10000。</p>
<h2 id="程序样例-8"><a href="#程序样例-8" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int narcissistic( int number );</span><br><span class="line">void PrintN( int m, int n );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;m, &amp;n);</span><br><span class="line">    if ( narcissistic(m) ) printf(&quot;%d is a narcissistic number\n&quot;, m);</span><br><span class="line">    PrintN(m, n);</span><br><span class="line">    if ( narcissistic(n) ) printf(&quot;%d is a narcissistic number\n&quot;, n);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 你的代码将被嵌在这里 */</span><br></pre></td></tr></table></figure>





<h2 id="关键代码-8"><a href="#关键代码-8" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int narcissistic( int number )&#123;</span><br><span class="line">	int res = number, i;</span><br><span class="line">	if(number&gt;=100&amp;&amp;number&lt;=999)&#123;</span><br><span class="line">		while(number&gt;0)&#123;</span><br><span class="line">			i = number%10;</span><br><span class="line">			res -= i*i*i;</span><br><span class="line">			number /= 10;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;else if(number&gt;=1000&amp;&amp;number&lt;=9999)&#123;</span><br><span class="line">		while(number&gt;0)&#123;</span><br><span class="line">			i = number%10;</span><br><span class="line">			res -= i*i*i*i;</span><br><span class="line">			number /= 10;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return !res;</span><br><span class="line">&#125;</span><br><span class="line">void PrintN( int m, int n )&#123;</span><br><span class="line">	for(int i=m+1;i&lt;n;i++)&#123;</span><br><span class="line">		if(narcissistic(i))&#123;</span><br><span class="line">			printf(&quot;%d\n&quot;,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="习题5-7-使用函数求余弦函数的近似值"><a href="#习题5-7-使用函数求余弦函数的近似值" class="headerlink" title="习题5-7 使用函数求余弦函数的近似值"></a>习题5-7 使用函数求余弦函数的近似值</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><p>本题要求实现一个函数，用下列公式求cos(<em>x</em>)的近似值，精确到最后一项的绝对值小于<em>e</em>：</p>
<p>$$<br>cos(x)=x^0 /0!−x ^2/2!+x ^4/4!−x ^6/6!+⋯<br>$$</p>
<p>其中用户传入的参数为误差上限<code>e</code>和自变量<code>x</code>；函数<code>funcos</code>应返回用给定公式计算出来、并且满足误差要求的cos(<em>x</em>)的近似值。输入输出均在双精度范围内。</p>
<h2 id="程序样例-9"><a href="#程序样例-9" class="headerlink" title="程序样例"></a>程序样例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">funcos</span><span class="params">( <span class="keyword">double</span> e, <span class="keyword">double</span> x )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">double</span> e, x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;e, &amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cos(%.2f) = %.6f\n&quot;</span>, x, <span class="built_in">funcos</span>(e, x));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>



<h2 id="关键代码-9"><a href="#关键代码-9" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">funcos</span><span class="params">( <span class="keyword">double</span> e, <span class="keyword">double</span> x )</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">1</span>,temp=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> i, n=<span class="number">2</span>,flag = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	一定要用do while才行，不然无法满足最后一项的绝对值小于e</span></span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//		把求幂写出来了才看到引用了math库 </span></span><br><span class="line"><span class="comment">//		temp=1;</span></span><br><span class="line"><span class="comment">//		for(i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">//			temp *= x;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		temp = <span class="built_in">pow</span>(x,n);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			temp /= i;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		res += flag*temp;</span><br><span class="line">		n += <span class="number">2</span>;</span><br><span class="line">		flag *= <span class="number">-1</span> ;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">while</span>(temp&gt;=e);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="突然不能免费用了"><a href="#突然不能免费用了" class="headerlink" title="突然不能免费用了"></a>突然不能免费用了</h1><p>2021年8月22日</p>
<p><img src="/p/6698/Snipaste_2021-08-22_12-34-38.png" alt="Snipaste_2021-08-22_12-34-38"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
        <category>PTA</category>
        <category>OJ</category>
        <category>浙大版C语言程序设计（第3版）</category>
      </categories>
  </entry>
  <entry>
    <title>二维数组两对角线乘积</title>
    <url>/p/2dd1/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/p/2dd1/Snipaste_2021-08-15_20-04-53.png" alt="Snipaste_2021-08-15_20-04-53"></p>
<p>题目来源：桂林理工 - 878-数据结构及程序设计 - 2015年 - 第十二题</p>
<h1 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h1><h2 id="解题关键代码"><a href="#解题关键代码" class="headerlink" title="解题关键代码"></a>解题关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int res = 1;</span><br><span class="line">printf(&quot;二维数组两对角线元素如下：\n&quot;);</span><br><span class="line">for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">    for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">        if(i==j||i+j==3)&#123;</span><br><span class="line">            printf(&quot;%d\t&quot;,A[i][j]);</span><br><span class="line">            res *= A[i][j];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;二维数组两对角线元素的积为：%d\n&quot;,res);</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void func(int A[][4])&#123;</span><br><span class="line">	</span><br><span class="line">	printf(&quot;二维数组元素如下：\n&quot;);</span><br><span class="line">	for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">		for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">			printf(&quot;%d\t&quot;,A[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	</span><br><span class="line">	int res = 1;</span><br><span class="line">	printf(&quot;二维数组两对角线元素如下：\n&quot;);</span><br><span class="line">	for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">		for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">			if(i==j||i+j==3)&#123;</span><br><span class="line">				printf(&quot;%d\t&quot;,A[i][j]);</span><br><span class="line">				res *= A[i][j];</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				printf(&quot;\t&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;二维数组两对角线元素的积为：%d\n&quot;,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	int A[4][4]=&#123;&#123;1,2,3,4,&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;,&#123;13,14,15,16&#125;&#125;;</span><br><span class="line">	func(A);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/2dd1/Snipaste_2021-08-15_20-26-31.png" alt="Snipaste_2021-08-15_20-26-31"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>字符冒泡排序（从小到大）</title>
    <url>/p/6d4f/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/p/6d4f/Snipaste_2021-08-15_19-14-20.png" alt="Snipaste_2021-08-15_19-14-20"></p>
<p>题目来源：桂林理工 - 878-数据结构及程序设计 - 2015年 - 第十一题</p>
<h1 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h1><h2 id="解题关键代码"><a href="#解题关键代码" class="headerlink" title="解题关键代码"></a>解题关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void bubbleSort(char ch[], int len)&#123;</span><br><span class="line">	char temp;</span><br><span class="line">	for(int i=0;i&lt;len-1;i++)&#123;</span><br><span class="line">		for(int j=0;j&lt;len-1-i;j++)&#123;</span><br><span class="line">			if(ch[j] &gt; ch[j+1])&#123;</span><br><span class="line">				temp = ch[j];</span><br><span class="line">				ch[j] = ch[j+1];</span><br><span class="line">				ch[j+1] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void bubbleSort(char ch[], int len)&#123;</span><br><span class="line">	char temp;</span><br><span class="line">	for(int i=0;i&lt;len-1;i++)&#123;</span><br><span class="line">		for(int j=0;j&lt;len-1-i;j++)&#123;</span><br><span class="line">			if(ch[j] &gt; ch[j+1])&#123;</span><br><span class="line">				temp = ch[j];</span><br><span class="line">				ch[j] = ch[j+1];</span><br><span class="line">				ch[j+1] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	</span><br><span class="line">	char ch[20];</span><br><span class="line">	int len;</span><br><span class="line">	printf(&quot;请输入20个字符：&quot;);</span><br><span class="line">	scanf(&quot;%s&quot;,ch);</span><br><span class="line">	len = strlen(ch);</span><br><span class="line">	printf(&quot;原字符串为：%s,长度为：%d\n&quot;,ch,len);</span><br><span class="line">	</span><br><span class="line">	bubbleSort(ch,len);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;起泡排序后的字符串为：&quot;);</span><br><span class="line">	printf(&quot;%s&quot;,ch);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/6d4f/Snipaste_2021-08-15_19-27-35.png" alt="Snipaste_2021-08-15_19-27-35"></p>
<p><img src="/p/6d4f/Snipaste_2021-08-15_19-32-07.png" alt="Snipaste_2021-08-15_19-32-07"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>字符串反序</title>
    <url>/p/a2c7/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/p/a2c7/Snipaste_2021-08-15_19-10-35.png" alt="Snipaste_2021-08-15_19-10-35"></p>
<p>题目来源：桂林理工 - 878-数据结构及程序设计 - 2015年 - 第十题</p>
<h1 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h1><h2 id="解题关键代码"><a href="#解题关键代码" class="headerlink" title="解题关键代码"></a>解题关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void reverseChar(char ch[], int len)&#123;</span><br><span class="line">	char temp;</span><br><span class="line">	for(int i=0;i&lt;len/2;i++)&#123;</span><br><span class="line">		temp = ch[i];</span><br><span class="line">		ch[i] = ch[len-1-i];</span><br><span class="line">		ch[len-1-i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void reverseChar(char ch[], int len)&#123;</span><br><span class="line">	char temp;</span><br><span class="line">	for(int i=0;i&lt;len/2;i++)&#123;</span><br><span class="line">		temp = ch[i];</span><br><span class="line">		ch[i] = ch[len-1-i];</span><br><span class="line">		ch[len-1-i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	char ch[20];</span><br><span class="line">	int len;</span><br><span class="line">	printf(&quot;请输入原字符串：&quot;);</span><br><span class="line">	scanf(&quot;%s&quot;,ch);</span><br><span class="line">	len = strlen(ch);</span><br><span class="line">	printf(&quot;原字符串为：%s,长度为：%d\n&quot;,ch,len);</span><br><span class="line"></span><br><span class="line">	reverseChar(ch, len);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;反序后的字符串为：&quot;);</span><br><span class="line">	printf(&quot;%s&quot;,ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/a2c7/Snipaste_2021-08-15_19-03-41.png" alt="Snipaste_2021-08-15_19-03-41"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>2015年821：有序单链表合并</title>
    <url>/p/16c6/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>西北师范大学2015年821：第六题算法设计题（数据结构部分）</p>
<p><img src="/p/16c6/Snipaste_2021-08-15_16-22-01.png" alt="Snipaste_2021-08-15_16-22-01"></p>
<h1 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct Inode&#123;</span><br><span class="line">	int data;</span><br><span class="line">	struct Inode *next;</span><br><span class="line">&#125;Inode, *lklist;</span><br><span class="line"></span><br><span class="line">void mergelklist(lklist &amp;la,lklist &amp;lb,lklist &amp;lc)</span><br></pre></td></tr></table></figure>



<h1 id="我的笨方法"><a href="#我的笨方法" class="headerlink" title="我的笨方法"></a>我的笨方法</h1><h2 id="解题关键代码"><a href="#解题关键代码" class="headerlink" title="解题关键代码"></a>解题关键代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void mergelklist(lklist &amp;la,lklist &amp;lb,lklist &amp;lc)&#123;</span><br><span class="line">	while(la!=NULL&amp;&amp;lb!=NULL)&#123;</span><br><span class="line">		if(la-&gt;data &lt; lb-&gt;data)&#123;</span><br><span class="line">			LinkListAdd(lc, la-&gt;data);</span><br><span class="line">			la = la-&gt;next;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			LinkListAdd(lc, lb-&gt;data);</span><br><span class="line">			lb = lb-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	while(la!=NULL)&#123;</span><br><span class="line">		LinkListAdd(lc, la-&gt;data);</span><br><span class="line">		la = la-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	while(lb!=NULL)&#123;</span><br><span class="line">		LinkListAdd(lc, lb-&gt;data);</span><br><span class="line">		lb = lb-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Inode&#123;</span><br><span class="line">	int data;</span><br><span class="line">	struct Inode *next;</span><br><span class="line">&#125;Inode, *lklist;</span><br><span class="line"></span><br><span class="line">//不带头结点</span><br><span class="line">bool InitNullList(lklist &amp;L)&#123;</span><br><span class="line">  L=NULL;   //空表，暂时还没有任何结点。防止脏数据。 </span><br><span class="line">  return true; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LinkListAdd(lklist &amp;L,int e)&#123;</span><br><span class="line">	Inode *p=L;	//指针p指向当前扫描到的结点 </span><br><span class="line">	</span><br><span class="line">	Inode *s = (Inode *)malloc(sizeof(Inode));</span><br><span class="line">	s-&gt;data = e;</span><br><span class="line">	s-&gt;next = NULL;</span><br><span class="line">	</span><br><span class="line">	if(p==NULL)&#123;</span><br><span class="line">		L = s;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	while(p-&gt;next!=NULL)&#123;	//循环找到末尾结点 </span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打印输出单链表 </span><br><span class="line">//---------------start------------------- </span><br><span class="line">void LinkListPrint(lklist L)&#123;</span><br><span class="line">	Inode *p=L;	//指针p指向当前扫描到的结点 </span><br><span class="line">	</span><br><span class="line">	if(L==NULL)&#123;</span><br><span class="line">		printf(&quot;NULL\n&quot;);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">//	while无法输出最后一个结点的值 </span><br><span class="line">	while(p-&gt;next!=NULL)&#123;</span><br><span class="line">		printf(&quot;%d\t&quot;,p-&gt;data);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">//	此处补充输出最后一个结点的值 </span><br><span class="line">	if(p-&gt;next==NULL)&#123;</span><br><span class="line">		printf(&quot;%d\n&quot;,p-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mergelklist(lklist &amp;la,lklist &amp;lb,lklist &amp;lc)&#123;</span><br><span class="line">	while(la!=NULL&amp;&amp;lb!=NULL)&#123;</span><br><span class="line">		if(la-&gt;data &lt; lb-&gt;data)&#123;</span><br><span class="line">			LinkListAdd(lc, la-&gt;data);</span><br><span class="line">			la = la-&gt;next;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			LinkListAdd(lc, lb-&gt;data);</span><br><span class="line">			lb = lb-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	while(la!=NULL)&#123;</span><br><span class="line">		LinkListAdd(lc, la-&gt;data);</span><br><span class="line">		la = la-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	while(lb!=NULL)&#123;</span><br><span class="line">		LinkListAdd(lc, lb-&gt;data);</span><br><span class="line">		lb = lb-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	lklist la,lb,lc;</span><br><span class="line">	</span><br><span class="line">	InitNullList(la);</span><br><span class="line">	LinkListAdd(la,1);</span><br><span class="line">	LinkListAdd(la,3);</span><br><span class="line">	LinkListAdd(la,4);</span><br><span class="line">	LinkListAdd(la,6);</span><br><span class="line">	printf(&quot;-----输出la------\n\n&quot;);</span><br><span class="line">	LinkListPrint(la);</span><br><span class="line">	</span><br><span class="line">	InitNullList(lb);</span><br><span class="line">	LinkListAdd(lb,2);</span><br><span class="line">	LinkListAdd(lb,5);</span><br><span class="line">	LinkListAdd(lb,7);</span><br><span class="line">	LinkListAdd(lb,8);</span><br><span class="line">	LinkListAdd(lb,9);</span><br><span class="line">	printf(&quot;-----输出lb------\n\n&quot;);</span><br><span class="line">	LinkListPrint(lb);</span><br><span class="line">	</span><br><span class="line">	InitNullList(lc);</span><br><span class="line">	mergelklist(la,lb,lc);</span><br><span class="line">	printf(&quot;-----输出合并后的lc------\n&quot;);</span><br><span class="line">	LinkListPrint(lc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/p/16c6/Snipaste_2021-08-15_16-30-46.png" alt="Snipaste_2021-08-15_16-30-46"></p>
]]></content>
      <categories>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>Dev-Cpp的使用</title>
    <url>/p/df03/</url>
    <content><![CDATA[<h1 id="取消自动补全"><a href="#取消自动补全" class="headerlink" title="取消自动补全"></a>取消自动补全</h1><p>工具-&gt;编辑器选项-&gt;“代码补全”页：</p>
<p>​    1、去掉“允许代码补全”勾选项（这个是代码的提示，可以不用去掉）</p>
<p>​    2、去掉“启动符合匹配”</p>
<p>-&gt;“确定”按钮</p>
<h1 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h1><ul>
<li>文件-&gt;新建-&gt;项目</li>
<li>选择Empty Project</li>
<li>命名项目名称</li>
<li>确认</li>
</ul>
<p>参考：<br>c语言自己写一个.h的头文件：<a href="https://blog.csdn.net/Wolf_xujie/article/details/102166384">https://blog.csdn.net/Wolf_xujie/article/details/102166384</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>数据结构与程序设计</category>
      </categories>
  </entry>
  <entry>
    <title>hexo+next主题优化</title>
    <url>/p/784a/</url>
    <content><![CDATA[<h1 id="为什么选择next主题"><a href="#为什么选择next主题" class="headerlink" title="为什么选择next主题"></a>为什么选择next主题</h1><p>默认的主题是landscope，没有访问量和站内搜索的功能。</p>
<p><a href="https://github.com/next-theme/hexo-theme-next">next主题</a>可扩展性比较好，集成了许多功能，比较方便自己动手，所以选择了这个主题。</p>
<h1 id="next主题优化"><a href="#next主题优化" class="headerlink" title="next主题优化"></a>next主题优化</h1><p>大部分参考<a href="https://blog.csdn.net/weidong_y/article/details/90904781">https://blog.csdn.net/weidong_y/article/details/90904781</a></p>
<h2 id="next阅读进度条"><a href="#next阅读进度条" class="headerlink" title="next阅读进度条"></a>next阅读进度条</h2><p>看到好多方法都是用的Progress module，再修改主题配置的pace，但是我的next是8.7.0版的，似乎不再支持这个方式了。<br>​</p>
<p>阅读next的主题配置文件，发现了reading_progress，做出以下修改后，出现顶部进度条。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Reading progress bar</span></span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: left | right</span></span><br><span class="line">  start_at: left</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: top | bottom</span></span><br><span class="line">  position: top</span><br><span class="line">  reversed: false</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 5px</span><br></pre></td></tr></table></figure>



<p>右下角显示当前浏览百分比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 themes/next/_config.yml ，</span><br><span class="line">搜索关键字 scrollpercent </span><br><span class="line">把 false 改为 true。</span><br></pre></td></tr></table></figure>





<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>参考：<a href="https://www.jianshu.com/p/f72aaad7b852">https://www.jianshu.com/p/f72aaad7b852</a></p>
<p>关键代码</p>
<p>打开/node_modules/hexo-asset-image/index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">    else</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">    var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">            // For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">            var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">              // In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              if(srcArray.length &gt; 1)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">              $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>缺点：需要修改node_modules下文件，以后再部署时比较麻烦</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><a href="https://oldgerman.github.io/eeea93b8/">hexo 如何上传本地图片</a></p>
<h3 id="同时在本地对Typora做适配"><a href="#同时在本地对Typora做适配" class="headerlink" title="同时在本地对Typora做适配"></a>同时在本地对Typora做适配</h3><p>参考：<a href="https://www.cnblogs.com/bzsheng/p/13802829.html">hexo博客如何插入图片</a></p>
<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式 - 图像 - 设置图片根目录</span><br><span class="line">设置为当前文档同名目录</span><br><span class="line">ok</span><br></pre></td></tr></table></figure>



<p><img src="/p/784a/Snipaste_2021-08-14_17-24-07.png" alt="Snipaste_2021-08-14_17-24-07"></p>
<h2 id="图片加阴影效果"><a href="#图片加阴影效果" class="headerlink" title="图片加阴影效果"></a>图片加阴影效果</h2><p>给文章和图片加一个边框阴影效果，效果很好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开next\source\css\_common\components\post\post-body.styl</span><br><span class="line"></span><br><span class="line"># 给文章加一个边框阴影效果</span><br><span class="line">.post-body &#123;</span><br><span class="line">  padding: 25px;</span><br><span class="line">  -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">  -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 给图片加一个边框阴影效果</span><br><span class="line">.post-body &#123;</span><br><span class="line">  iframe, img, video, embed &#123;</span><br><span class="line">    -webkit-box-shadow: 0 0 50px rgba(202, 203, 203, .9);</span><br><span class="line">    -moz-box-shadow: 0 0 50px rgba(202, 203, 204, .9);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.himmy.cn/2019/07/06/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/">Hexo博客NexT主题下添加文章边框阴影效果</a></p>
<h2 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h2><p>参考：<a href="https://blog.csdn.net/Mculover666/article/details/103137719/">优化文章永久链接为数字编号</a></p>
<p>由于我的博客文章较少，所以采用尽量使文章链接更短的方式，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permalink: p/:abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc16 #support crc16(default) and crc32</span><br><span class="line">  rep: hex   #support dec(default) and hex</span><br></pre></td></tr></table></figure>



<h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>参考：<a href="https://blog.csdn.net/TomAndersen/article/details/104691118">Hexo之NexT主题中设置symbols_count_time统计单词</a></p>
<p>其中，我的主题配置设置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true     # 是否另起一行（true的话不和发表时间等同一行）</span><br><span class="line">  item_text_post: true     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br><span class="line">  item_text_total: true     # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br><span class="line">  awl: 4                   # Average Word Length</span><br><span class="line">  wpm: 275                 # Words Per Minute（每分钟阅读词数）</span><br><span class="line">  suffix: mins.</span><br></pre></td></tr></table></figure>



<hr>
<p>next主题优化 - 参考：</p>
<p>官方文档 - next开始使用：<a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a><br>官方文档 - next主题配置：<a href="https://theme-next.iissnan.com/theme-settings.html">https://theme-next.iissnan.com/theme-settings.html</a></p>
<p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502">Hexo博客优化之Next主题美化</a></p>
<p>next主题优秀博客：<a href="https://qidaink.github.io/posts/e2e8c66d/">https://qidaink.github.io/posts/e2e8c66d/</a><br>其他主题优秀博客：<br><a href="https://enfangzhong.github.io/">https://enfangzhong.github.io/</a><br><a href="https://shen-yu.gitee.io/">https://shen-yu.gitee.io/</a></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>手机服务器可以作为暂时的服务器，新建一个生活博客，部署到手机服务器。</p>
<p>github pages可以作为长期服务器，发布技术方面的博客。</p>
<h2 id="手机服务器-内网穿透"><a href="#手机服务器-内网穿透" class="headerlink" title="手机服务器+内网穿透"></a>手机服务器+内网穿透</h2><p>这一种方式挺新鲜的，但是也有不可避免的缺点：    </p>
<ul>
<li>手机需要一直开着，不适合做长期服务器，可以作为暂时服务器使用。</li>
<li>内网穿透用的别人提供的免费版，不稳定，容易崩。</li>
</ul>
<p>修改本地启动服务时的默认端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开node_modules\hexo-server\index.js文件</span><br><span class="line">找到port，将4000修改为其他端口</span><br></pre></td></tr></table></figure>



<p>参考：<a href="http://www.leiyawu.com/2018/04/20/hexo%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/">hexo添加admin,修改默认端口</a></p>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>部署hexo博客到GitHub pages的教程一大堆，这里不再赘述。需要注意的有两点，一是要选择ssh密钥的方式提交，二是配置url。全部在根目录的_config.yml中配置</p>
<p>首先看<a href="https://www.cnblogs.com/wynjauu/articles/10568445.html">git两种连接方式:ssh和http配置介绍</a>。http的方式，如果只是使用一两次的话，确实比较方便，拿来就用。但是如果使用次数比较多，比如需要经常hexo d部署，就不好了，因为比较不稳定，总是卡死。关于卡死，网上给出的办法是把http连接的方式更换为ssh连接的方式。<br>​</p>
<p>在根目录的_config.yml中找到deploy配置，配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span></span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:tsuish/tsuish.github.io.git,deploy</span><br></pre></td></tr></table></figure>


<p>设置ssh连接的步骤如下，需要在命令行中操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查是否有.ssh的文件夹</span></span><br><span class="line">cd ~/.ssh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有.ssh文件夹，先查看自己的邮箱，再连续三个回车生成私钥。</span></span><br><span class="line">git config user.email</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxxx@qq.com&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入生成私钥的文件夹， C:\Users\[yourname]\.ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 右键git bash，复制cat后出现的内容</span></span><br><span class="line">cat id_rsa.pub</span><br><span class="line">ssh-rsa  xxx...xxx   xxx@qq.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">登录Github，点击头像下的settings，添加ssh。新建一个new ssh key，将id_rsa.pub文件里的内容粘贴上去</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line">The authenticity of host &#x27;gitee.com (212.64.62.183)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is xxxxx</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;gitee.com&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">Hi xxx! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure>


<p>如果部署后，打开博客发现样式不对，需要在hexo根目录的_config.yml中配置url，配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> URL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span></span><br><span class="line">url: &#x27;https://tsuish.github.io/&#x27;</span><br></pre></td></tr></table></figure>



<p>小提示：</p>
<p>每次部署后，github pages都会有一定延时，这是正常的，稍等一会就好了。这是gitee对此的解答：<a href="https://gitee.com/help/articles/4136#article-header0">https://gitee.com/help/articles/4136#article-header0</a></p>
<p>busuanzi也会有延时，要等的时间比较久。busuanzi的计算结果，似乎与链接有关。</p>
<p>参考：<br>同时部署到多个pages：<a href="https://blog.csdn.net/qintian888/article/details/82195097">https://blog.csdn.net/qintian888/article/details/82195097</a><br>OpenSSL SSL报错：<a href="https://blog.csdn.net/weixin_43945983/article/details/110882074">https://blog.csdn.net/weixin_43945983/article/details/110882074</a><br>GitHub如何配置SSH Key：<a href="https://blog.csdn.net/u013778905/article/details/83501204">https://blog.csdn.net/u013778905/article/details/83501204</a><br>码云(gitee)配置ssh密钥：<a href="https://www.jianshu.com/p/416ac815b2b1">https://www.jianshu.com/p/416ac815b2b1</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>Auto.JS</title>
    <url>/p/2ae0/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Auto.JS简介与教程<br><a href="https://www.jianshu.com/p/4602db0618df">https://www.jianshu.com/p/4602db0618df</a></p>
<p>B站教程<br><a href="https://space.bilibili.com/21486893/video">https://space.bilibili.com/21486893/video</a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>手机安装：<br>Auto.js 4.1.0：<a href="https://cuishuohao.lanzoui.com/iFj24n9g8ab">https://cuishuohao.lanzoui.com/iFj24n9g8ab</a><br>Auto.js打包插件：<a href="https://cuishuohao.lanzoui.com/iugZ5n9g83e">https://cuishuohao.lanzoui.com/iugZ5n9g83e</a><br>Auto.js Pro（仅备用）：<a href="https://cuishuohao.lanzoui.com/iXd62n9g8ta">https://cuishuohao.lanzoui.com/iXd62n9g8ta</a><br>电脑vscode插件：<br><a href="https://github.com/hyb1996/Auto.js-VSCode-Extension">https://github.com/hyb1996/Auto.js-VSCode-Extension</a></p>
<p>打开服务：        Ctrl+Shift+P：Auto.js: StartServer<br>保存Js到手机：  Ctrl+Shift+P：Auto.js: Save On Device<br>在手机上运行：  F5</p>
<h1 id="手机需要权限"><a href="#手机需要权限" class="headerlink" title="手机需要权限"></a>手机需要权限</h1><p>进入开发者模式（小米note3）:我的设备–全部参数–MIUI版本，连续点击<br>​</p>
<p>无障碍服务<br>悬浮窗<br>​</p>
<p>安装Auto.JS APK：在手机上安装Auto.js_V4.1.1_Alpha2<br>注：App会自动引导开启“无障碍服务”。以小米为例，按程序指示，在程序跳转到的页面点击“更多已下载的服务”-&gt;“Auto.js”-&gt;开启服务</p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/90065914">https://zhuanlan.zhihu.com/p/90065914</a></p>
<p><strong>小米（以红米note9为例）</strong><br>无障碍服务：<br>设置–更多设置–无障碍–已下载的服务–Auto.js–开启服务<br>悬浮窗：<br>设置–应用设置–授权管理–应用权限管理–Auto.js–显示悬浮窗–始终允许</p>
<p><strong>魅族（以魅蓝note5为例）</strong><br>无障碍服务：<br>设置–辅助功能–无障碍–服务–Auto.js–开启<br>悬浮窗：<br>设置–应用管理–应用权限–Auto.js–悬浮窗–开启</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>参考：<br><a href="https://www.jb51.net/article/186148.htm">https://www.jb51.net/article/186148.htm</a></p>
<p>官方文档：<br><a href="https://hyb1996.github.io/AutoJs-Docs/#/?id=%e7%bb%bc%e8%bf%b0">https://hyb1996.github.io/AutoJs-Docs/#/?id=%e7%bb%bc%e8%bf%b0</a></p>
<p>swipe滑动文档：<br><a href="https://hyb1996.github.io/AutoJs-Docs/#/coordinatesBasedAutomation?id=swipex1-y1-x2-y2-duration">https://hyb1996.github.io/AutoJs-Docs/#/coordinatesBasedAutomation?id=swipex1-y1-x2-y2-duration</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>Android手机搭建hexo博客</title>
    <url>/p/c8b9/</url>
    <content><![CDATA[<p>2021年8月11日</p>
<h1 id="电脑搭建"><a href="#电脑搭建" class="headerlink" title="电脑搭建"></a>电脑搭建</h1><p>今天逛QQ空间，看到丁魏武发了一个自己的博客地址。我向他学习，也试着搭建一个博客。<br>​</p>
<p>参考：<br>丁魏武博客地址：<a href="http://weiwuding.top/">http://weiwuding.top</a><br>hexo史上最全搭建教程：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a><br>npm更换镜像源操作：<a href="https://blog.csdn.net/qq_38253549/article/details/114081724">https://blog.csdn.net/qq_38253549/article/details/114081724</a></p>
<p>在Windows电脑上搭建成功，但是无法外网访问。<br>​</p>
<h1 id="手机搭建"><a href="#手机搭建" class="headerlink" title="手机搭建"></a>手机搭建</h1><p>于是想着用手机搭建多好啊。拿出魅蓝note5，开始造。<br>​</p>
<p>先在手机安装F-Droid，再在F-Droid上下载安装Termux。<br>​</p>
<p>手机上termux不好操作，于是用cmd通过ssh连接。<br>手机termux启动sshd服务：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sshd</span><br><span class="line">nmap <span class="number">192.168</span>.<span class="number">31.67</span></span><br></pre></td></tr></table></figure>


<p>电脑在cmd用ssh连：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh  u0_a103@<span class="number">192.168</span>.<span class="number">31.67</span> <span class="literal">-p</span> <span class="number">8022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh的密码：root</span></span><br></pre></td></tr></table></figure>



<p>cmd隐藏会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用tmux命令，系统后台不挂断地运行命令，退出终端不会影响程序的运行。类似于nohup命令</span><br><span class="line">tmux</span><br></pre></td></tr></table></figure>




<p>pkg换源关键代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deb [<span class="type">arch</span>=<span class="type">all</span>,<span class="type">aarch64</span>] http://mirrors.tuna.tsinghua.edu.cn/termux stable main</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27;</span> <span class="variable">$PREFIX</span>/etc/apt/sources.list</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s@^\(deb.*games stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27;</span> <span class="variable">$PREFIX</span>/etc/apt/sources.list.d/game.list</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s@^\(deb.*science stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27;</span> <span class="variable">$PREFIX</span>/etc/apt/sources.list.d/science.list</span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>



<p>Vim不能右键粘贴</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line">/<span class="keyword">data</span>/<span class="keyword">data</span>/com.termux/files/home</span><br><span class="line"></span><br><span class="line">vim .vimrc</span><br><span class="line"><span class="built_in">set</span> mouse=<span class="built_in">r</span></span><br></pre></td></tr></table></figure>



<p>搭建成功，访问地址：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment"># 启动本地服务器，可以在localhost:4000查看网站修改效果</span></span><br><span class="line"></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">31.67</span>:<span class="number">4000</span></span><br></pre></td></tr></table></figure>




<p>魅族手机息屏时间最长30分钟，为了防止息屏，用auto.js每10分钟唤醒一次。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto();</span><br><span class="line">while(1)&#123;</span><br><span class="line">    device.wakeUp();</span><br><span class="line">    // 10分钟一次，防止息屏</span><br><span class="line">    sleep(600000); </span><br><span class="line">    toast(&quot;魅族不息屏&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>参考：<br>Termux的安装；ssh连接：<a href="https://blog.csdn.net/weixin_42599499/article/details/111185609">https://blog.csdn.net/weixin_42599499/article/details/111185609</a><br>F-Droid文件：<a href="https://cuishuohao.lanzoui.com/iVhKzsh270j">https://cuishuohao.lanzoui.com/iVhKzsh270j</a><br>李志豪的个人博客：<a href="https://lruihao.cn/">https://lruihao.cn/</a><br>在Android上搭建hexo博客：<a href="https://blog.csdn.net/qq_39520417/article/details/81941075">https://blog.csdn.net/qq_39520417/article/details/81941075</a><br>自动更换Termux的源（有bug）：<a href="https://blog.csdn.net/weixin_43372529/article/details/103317005">https://blog.csdn.net/weixin_43372529/article/details/103317005</a><br>Termux-镜像源（结合上一个参考）：<a href="https://www.jianshu.com/p/27019fc864cb">https://www.jianshu.com/p/27019fc864cb</a><br>vim右键不能复制粘贴：<a href="https://www.cnblogs.com/xpylovely/p/11137803.html">https://www.cnblogs.com/xpylovely/p/11137803.html</a><br>Termux 高级终端安装使用配置教程（tmux）：<a href="https://www.cnblogs.com/cutesnow/p/11430833.html">https://www.cnblogs.com/cutesnow/p/11430833.html</a></p>
<h1 id="手机端外网访问"><a href="#手机端外网访问" class="headerlink" title="手机端外网访问"></a>手机端外网访问</h1><p>root用户切换（似乎没有用到）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> termux切换root用户：</span></span><br><span class="line">su</span><br><span class="line"></span><br><span class="line">M5Note:/data/data/com.termux/files/home #</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> termux切换普通用户：</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>



<p>手机安装qpython3（不知道有没有用到）<br>下载地址：<a href="https://github.com/qpython-android/qpython3/releases">https://github.com/qpython-android/qpython3/releases</a></p>
<p>termux内网穿透</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入Python客户端所在的目录</span></span><br><span class="line">cd /storage/emulated/0/Download</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行脚本</span></span><br><span class="line">python sunny.py</span><br></pre></td></tr></table></figure>

<p>外网访问地址：<a href="http://tsuish.free.idcfengye.com/">http://tsuish.free.idcfengye.com（免费版，很不稳定）</a></p>
<p>参考：<br>ngrok内网穿透：<a href="http://ngrok.cc/user.html">http://ngrok.cc/user.html</a><br>Ngrok的Android版本使用教程：<a href="https://www.ngrok.cc/_book/start/ngrok_android.html">https://www.ngrok.cc/_book/start/ngrok_android.html</a><br>sunny.py文件：<a href="https://www.ngrok.cc/sunny/python-ngrok.zip?v=2.1">https://www.ngrok.cc/sunny/python-ngrok.zip?v=2.1</a><br>魅族手机root教程：<a href="https://jingyan.baidu.com/article/f96699bbe53182894e3c1be8.html">https://jingyan.baidu.com/article/f96699bbe53182894e3c1be8.html</a><br>TerMux配置Root用户： <a href="https://blog.csdn.net/LYKymy/article/details/88911712">https://blog.csdn.net/LYKymy/article/details/88911712</a><br>Termux 高级终端安装使用配置教程：<a href="https://www.sqlsec.com/2018/05/termux.html">https://www.sqlsec.com/2018/05/termux.html</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
</search>
